<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Add2paper Engineering Blog</title>
 <link href="http://add2paper.github.com/" rel="self"/>
 <link href="http://add2paper.github.com"/>
 <updated>2013-06-13T21:32:37+09:00</updated>
 <id>http://add2paper.github.com</id>
 <author>
   <name>Add2paper</name>
   <email>home@add2paper.com</email>
 </author>

 
 <entry>
   <title>애드투페이퍼 서비스를 같이 혁신할 엔지니어분을 모십니다.</title>
   <link href="http://add2paper.github.com/2013/06/10/Add2paper-Recruiting"/>
   <updated>2013-06-10T00:00:00+09:00</updated>
   <id>http://add2paper.github.com/2013/06/10/Add2paper-Recruiting</id>
   <content type="html">&lt;img src='http://dgkqp309hf29p.cloudfront.net/media/image/2013/6/137084743083739.png' style='width: 100%' /&gt;&lt;img src='http://dgkqp309hf29p.cloudfront.net/media/image/2013/6/137084747402312.png' style='width: 100%; margin: 10px 0 10px 0;' /&gt;
&lt;p&gt;애드투페이퍼(&lt;a href='http://www.add2paper.com'&gt;홈페이지&lt;/a&gt; / &lt;a href='http://www.add2paper.com/pdf/'&gt;매체소개서&lt;/a&gt;)는 20대 대학생 타겟 미디어입니다. 현재 전국 70개 대학, 16만 명의 대학생이 애드투페이퍼 서비스를 사용하고 있습니다. 2013년 3월에 애드투페이퍼 앱(&lt;a href='http://www.add2paper.com/m_api/download/ios/'&gt;아이폰&lt;/a&gt; / &lt;a href='http://www.add2paper.com/m_api/download/android/'&gt;안드로이드&lt;/a&gt;)을 추가로 출시해 매일 모바일 회원의 50%가 앱에 접속하고 있습니다. (&lt;u&gt;50%에 달하는 DAU는 매우 놀라운 수치입니다! ^^&lt;/u&gt;)&lt;/p&gt;

&lt;p&gt;애드투페이퍼에서 대한민국 200만 대학생의 생활을 혁신하는 서비스를 같이 만들어나갈 엔지니어 분들을 찾습니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='__'&gt;웹 서비스 개발자&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;애드투페이퍼의 서비스의 백엔드는 100% Python으로 만들어져 있습니다. 저희 서비스의 구성 Stack은 &lt;a href='/2013/04/17/Add2paper-Technology-Stack/'&gt;&amp;#8220;애드투페이퍼 서비스 구성 Stack&amp;#8221;&lt;/a&gt; 포스팅에서 확인하실 수 있습니다. Python으로 혁신적인 서비스를 만들고 싶으신 분들, 더이상 Instagram, Pinterest, Quora 등 Python 엔지니어들의 지상낙원을 부러워하지 않으셔도 됩니다. 애드투페이퍼에서 Python으로 끝내주는 서비스 같이 만들어요!&lt;/p&gt;
&lt;br /&gt;
&lt;h3 id='id73'&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;애드투페이퍼 서비스 신규 기능 추가 / 신규 서비스 개발 &amp;#160;&lt;/li&gt;

&lt;li&gt;오픈소스 스택으로 자동화된 서비스 구성 및 운용 &amp;#160;&lt;/li&gt;

&lt;li&gt;DevOps (애드투페이퍼에서는 자동화된 배포 시스템을 이용, 누구나 원하는 시간에 언제든지 원클릭으로 배포가 가능합니다.) &amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h3 id='id74'&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python 가능자&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h3 id='id75'&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;기본적인 알고리즘에 대한 이해 &amp;#160;&lt;/li&gt;

&lt;li&gt;MySQL 사용 경험 &amp;#160;&lt;/li&gt;

&lt;li&gt;Linux 사용 경험 &amp;#160;&lt;/li&gt;

&lt;li&gt;웹 프레임워크 사용 경험 (Django, Flask, RoR 등) &amp;#160;&lt;/li&gt;

&lt;li&gt;Mercurial, Git 등 DVCS 사용 경험 &amp;#160;&lt;/li&gt;

&lt;li&gt;Memcached, Redis, Celery, Nginx, Gunicorn, Supervisor 중 1개 이상 사용해본 경험 &amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h2 id='___'&gt;애드투페이퍼 윈도우 클라이언트 개발자&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;전국 70대 대학교에 설치되어 있는 애드투페이퍼 윈도우 클라이언트를 혁신할 엔지니어분을 모십니다. 현재 애드투페이퍼 클라이언트는 애드투페이퍼 회원의 무료프린팅뿐만 아니라 기존 유료프린팅 솔루션까지 대체하는 차세대 프린팅 솔루션으로 입지를 굳히고 있습니다. (애드투페이퍼 클라이언트에서는 무료 / 유료 프린트가 모두 가능합니다.)&lt;/p&gt;

&lt;p&gt;현재까지 애드투페이퍼 클라이언트를 통해 인쇄된 프린팅 장수는 총 873만 6213장입니다(2013년 6월 10일 오후 5시 기준). 시험기간 같은 피크타임에는 하루 6만 장 이상 인쇄되기도 합니다. 애드투페이퍼 클라이언트는 전국 대학생 생활의 한 부분으로 자리 잡아가고 있습니다. 전국 모든 대학교 복사실 PC에 애드투페이퍼 클라이언트가 설치되는 그날까지, 애드투페이퍼 클라이언트의 혁신을 주도할 엔지니어분을 모십니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h3 id='id76'&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;애드투페이퍼 클라이언트 사용자 경험 혁신 &amp;#160;&lt;/li&gt;

&lt;li&gt;애드투페이퍼 클라이언트 성능 튜닝 &amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h3 id='id77'&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;C / C++ 가능자 &amp;#160;&lt;/li&gt;

&lt;li&gt;MFC 가능자 &amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h3 id='id78'&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;매일 전국 각지에서 애드투페이퍼 클라이언트를 이용해 인쇄하는 애디 친구들의 사용자 경험을 밤낮으로 고민하고 개선하는 열정을 가지신 분 &amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h2 id='_'&gt;지원 방법&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;resume, 포트폴리오 (형식 자유) 를 lkc@add2paper.com 으로 보내주시면 됩니다. (개인 블로그, 홈페이지, 또는 Github 계정을 함께 보내주시면 좋습니다.)&lt;/li&gt;

&lt;li&gt;이메일 접수 시 24시간 이내에 개별 연락드립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h2 id='__'&gt;애드투페이퍼 언론 보도&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.ajunews.com/kor/view.jsp?newsId=20130609000325'&gt;&amp;lt;인터뷰&amp;gt; “단지 공짜 출력? 20대 삶 개선할 것” | 아주경제&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.obsnews.co.kr/news/articleView.html?idxno=716608'&gt;&amp;#8220;아이디어만 있으면 창업&amp;#8221; | OBS&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.mt.co.kr/view/mtview.php?type=1&amp;amp;no=2013050316091578345&amp;amp;outlink=1'&gt;靑 &amp;#8220;창조경제 사례? 골프존·싸이·카카오톡이다&amp;#8221; | 머니투데이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;div class='fb-like' data-href='http://add2paper.github.io/2013/06/10/Add2paper-Recruiting/' data-send='true' data-show-faces='true' data-width='450' /&gt;</content>
 </entry>
 
 <entry>
   <title>애드투페이퍼 서비스 구성 Stack</title>
   <link href="http://add2paper.github.com/2013/04/17/Add2paper-Technology-Stack"/>
   <updated>2013-04-17T00:00:00+09:00</updated>
   <id>http://add2paper.github.com/2013/04/17/Add2paper-Technology-Stack</id>
   <content type="html">&lt;p&gt;안녕하세요, &lt;a href='http://www.add2paper.com'&gt;애드투페이퍼&lt;/a&gt;에서 개발을 담당하고 있는 &lt;a href='http://www.leekchan.com'&gt;이경찬&lt;/a&gt;입니다. 애드투페이퍼를 개발 및 운영하면서 경험하고 해결한 사항들을 공유하고자 블로그를 만들었습니다. 첫 번째 포스트에서는 애드투페이퍼 서비스 구성 Stack에 대해서 공유하고자 합니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;
&lt;br /&gt;
&lt;h3 id='_'&gt;서버 구성&lt;/h3&gt;

&lt;p&gt;애드투페이퍼 서비스는 KT Ucloud 인스턴스 7대 위에서 동작하고 있습니다. 각 인스턴스의 역할은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;로드밸런서 1대 (2vCore 2GB | Ubuntu 11.04 | HAProxy)&lt;/li&gt;

&lt;li&gt;어플리케이션 서버 3대 (4vCore 4GB | Ubuntu 11.04 | Gunicorn, Django, Supervisor)&lt;/li&gt;

&lt;li&gt;DB 2대 (4vCore 4GB | CentOS 5.4 | MySQL Master-Slave Replication 구성)&lt;/li&gt;

&lt;li&gt;캐시 + 워커 서버 1대 (4vCore 8GB | Ubuntu 11.04 | Memcached, Celery, Redis, Supervisor)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;현재는 &lt;a href='http://en.wikipedia.org/wiki/Single_point_of_failure'&gt;SPOF&lt;/a&gt; 가 많지만, 점진적으로 개선 중입니다. 궁극적으로는 무중단 인프라를 구축하는 것이 목표입니다. 현재 어플리케이션 서버와 DB는 Failover가 되고, HAProxy 이중화 작업을 최우선 과제로 진행 중입니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h3 id='_'&gt;서비스 구성&lt;/h3&gt;

&lt;p&gt;애드투페이퍼 서비스 구성은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;애드투페이퍼 웹서비스 &amp;#160;&lt;/li&gt;

&lt;li&gt;애드투페이퍼 앱 API 백엔드 &amp;#160;&lt;/li&gt;

&lt;li&gt;프린터 API 백엔드 &amp;#160;&lt;/li&gt;

&lt;li&gt;광고주용 실시간 리포트 사이트 &amp;#160;&lt;/li&gt;

&lt;li&gt;프린터관리자용 실시간 프린팅 및 정산 정보 확인 사이트 &amp;#160;&lt;/li&gt;

&lt;li&gt;내부 관리용 사이트 &amp;#160;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;애드투페이퍼 초반에는 일부 시스템이 ASP, PHP로 되어있었지만 2012년 하반기부터 기존 코드 및 신규 코드들을 Python + Django로 작성하여 현재는 100% Python + Django 코드로 동작중입니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='application_server_'&gt;Application Server 구성&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Python&lt;/li&gt;

&lt;li&gt;Django&lt;/li&gt;

&lt;li&gt;Nginx&lt;/li&gt;

&lt;li&gt;Gunicorn&lt;/li&gt;

&lt;li&gt;Supervisor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;앞서 언급한 것처럼 애드투페이퍼 서비스 코드는 Python, Django로 작성됩니다. 리버스 프록시로는 Nginx, WSGI Container로는 Gunicorn을 사용하고 있습니다. Supervisor는 Gunicorn 프로세스 모니터링 용으로 사용 중입니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='cache_'&gt;Cache 구성&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Memcached&lt;/li&gt;

&lt;li&gt;&lt;a href='http://pythonhosted.org/johnny-cache/'&gt;Johnny Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;애드투페이퍼 서비스에서는 모든 Database Read Query를 Memcached에 캐시하고 있습니다. 모든 상황에 대해 견고한 Cache Invalidation 로직을 만드는 작업은 매우 많은 시간이 소요되는 작업이므로, Johnny Cache라는 Cache Framework를 사용하고 있습니다. Johnny Cache는 기본적으로 MySQL의 Query Cache와 비슷하게 동작합니다. Johnny Cache Middleware를 등록해 놓으면 Monkey Patch를 통해 SELECT 쿼리가 발생할 때는 쿼리를 Key로 Memcached에 캐시하고, INSERT 또는 UPDATE 쿼리가 발생할 때는 해당 Table에 관계된 Cache들을 자동으로 Invalidation 해줍니다.&lt;/p&gt;

&lt;p&gt;백엔드 코드를 작성할 때는 Memcached의 Cache hit ratio를 높이기 위해 SELECT 문의 WHERE절에는 특정한 상수가 들어가는 것을 피하고 있습니다. 또한 어플리케이션상에서 데이터를 가공할 수 있을 때에는 최대한 어플리케이션에서 코드상에서 처리해서 I/O Bound 되는 것을 피하고 있습니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='database__storage'&gt;Database / Storage&lt;/h2&gt;

&lt;p&gt;데이터베이스는 MySQL 5.5 를 사용하고 있고, Master-Slave 구성으로 2대를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;서비스상에서 업로드 되는 이미지 및 파일은 Amazon S3 (Tokyo Region)에 저장하고 CloudFront를 붙여서 사용하고 있습니다. 광고 이미지를 리사이징 하는 등의 작업은 어플리케이션 서버에서 인메모리로 처리하고 S3에 저장합니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='worker_'&gt;Worker 구성&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Redis&lt;/li&gt;

&lt;li&gt;Celery&lt;/li&gt;

&lt;li&gt;Supervisor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;시간이 걸리는 Task들은 모두 Task Queue를 이용해 비동기로 처리하고 있습니다. Task Queue는 Celery를 이용하고 있고 작업들을 저장하고 분배하는 Broker 용도로 Redis를 사용하고 있습니다. 그리고 Celery 프로세스의 모니터링 용도로 Supervisor를 사용하고 있습니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='deployment'&gt;Deployment&lt;/h2&gt;

&lt;p&gt;어플리케이션 배포는 &lt;a href='http://beanstalkapp.com'&gt;beanstalk&lt;/a&gt;을 이용해 자동화하고 있습니다. beanstalk 서비스는 Mercurial 저장소를 제공하고 (Git도 제공), 등록된 서버들에 병렬로 접속해서 미리 지정된 SSH Command들을 실행시켜주는 기능을 제공합니다. 배포 시 각 서버에서 실행하는 커맨드는 다음과 같습니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h3 id='_'&gt;어플리케이션 서버&lt;/h3&gt;
&lt;pre&gt;
hg pull
hg update --clean
pip install -r ./requirements.txt
supervisorctl status gunicorn | sed &quot;s/.*[pid ]\([0-9]\+\)\,.*/\1/&quot; | xargs kill -HUP
&lt;/pre&gt;
&lt;p&gt;저장소에서 최신 코드를 받아온 뒤, 새로 추가된 모듈들을 설치한 후 Gunicorn에 -HUP signal을 보내서 graceful reload 기능(처리 중인 요청을 모두 처리하고 프로세스를 재시작함)을 실행시킵니다. supervisorctl reload 커맨드로 Gunicorn을 재시작하면 재시작하는 도중에는 요청을 받을 수 없는 상태가 되므로, pid를 읽어와서 -HUP 시그널을 보내는 방식으로 재시작시켜서 무중단으로 코드를 변경하고 있습니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h3 id='___'&gt;캐시 + 워커 서버&lt;/h3&gt;
&lt;pre&gt;
hg pull
hg update --clean
pip install -r ./requirements.txt
python ./manage.py migrate
supervisorctl reload
&lt;/pre&gt;
&lt;p&gt;캐시 + 워커 서버에서는 &lt;a href='http://south.aeracode.org/'&gt;South&lt;/a&gt;의 migrate 커맨드를 실행시켜서 데이터베이스를 마이그레이션하는 작업을 담당하고 있습니다. 모든 작업이 끝난 후에는 supervisorctl reload 명령을 실행시켜서 Celery 프로세스를 재시작 합니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='server_monitoring'&gt;Server Monitoring&lt;/h2&gt;

&lt;p&gt;서버 모니터링은 &lt;a href='http://www.datadoghq.com/'&gt;datadog&lt;/a&gt; 서비스를 이용해서 하고 있습니다. 실시간 모니터링이 가능하고 대시보드를 만들어 각 서버의 CPU, Memory, Network 사용량 등을 원하는 대로 가공해서 모아서 볼 수 있어서 효과적입니다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id='and_more'&gt;And more?&lt;/h2&gt;

&lt;p&gt;지금까지 저희 서비스 구성 Stack에 대해 공유 드렸는데요, 애드투페이퍼 앱에도 흥미로운 공유사항들이 많이 있습니다. 살짝 공유하자면 저희 앱은 HTML, Javascript로 제작되어서 단일 코드 베이스로 iOS / Android 플랫폼 양쪽에 배포하고 있는데요, 후속 포스팅에서 자세히 공유하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
&lt;br /&gt;&lt;div class='fb-like' data-href='http://add2paper.github.io' data-send='true' data-show-faces='true' data-width='450' /&gt;</content>
 </entry>
 
 
</feed>