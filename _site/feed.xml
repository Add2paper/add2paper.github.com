<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://add2paper.github.io</link>
    <atom:link href="http://add2paper.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Tue, 21 Jul 2015 02:23:12 +0000</pubDate>
    <lastBuildDate>Tue, 21 Jul 2015 02:23:12 +0000</lastBuildDate>

    
    
    <item>
      <title>50만 대학생들에게 든든한 힘이 되고있는 서비스 ‘애딧(애드투페이퍼)’팀에서 신입디자이너를 채용합니다!</title>
      <link>http://add2paper.github.io/2015/07/21/Recruiting-Designer/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2015/07/21/Recruiting-Designer</guid>
      <description>&lt;p&gt;&lt;img src=&quot;/images/recruiting_designer_header.png&quot; alt=&quot;디자이너 채용&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;디자이너 채용공고 (1명)&lt;/h2&gt;

&lt;p&gt;50만 대학생들에게 든든한 힘이 되고있는 서비스 ‘애딧(애드투페이퍼)’팀에서 신입디자이너를 채용합니다!
전국 140개 대학교 곳곳에 운영되고 있는 애딧zone부터, 구글플레이&amp;amp;앱스토어 평점 4.8을 받는 모바일어플리케이션을 운영하는 애딧 팀에 합류하는 것은 디자이너에게 무한한 성장의 기회가 될 것입니다.
지금 바로 지원하세요!&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;업무 분야&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UI / GUI Design&lt;/li&gt;
  &lt;li&gt;BX Design&lt;/li&gt;
  &lt;li&gt;UX Design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구체적으로,
애딧(애드투페이퍼) 모바일 어플리케이션 UI/UX 참여
애딧 브랜드 및 서비스 마케팅 관련 작업 참여 (모바일, 웹, 오프라인)
500여 기업과 함께하는 애딧의 다양한 광고캠페인 관련 업무 참여&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;포토샵, 일러스트레이터 활용 능력 상&lt;/li&gt;
  &lt;li&gt;포트폴리오에 모바일서비스와 관련된 프로젝트가 있을 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;이런 디자이너를 찾아요&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;에이전시보다 자체 프로덕트를 만드는 회사에 취업을 꿈꾸셨던 분&lt;/li&gt;
  &lt;li&gt;디자이너로서 기획, 브랜딩, 다른 팀과 협업에 직접적으로 참여하고 싶은 분&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;이런 팀원을 찾아요&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;타인을 존중할 줄 아는 인성을 갖추신 분&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;애드투페이퍼 서비스 사용 경험이 있는 분&lt;/li&gt;
  &lt;li&gt;대학생활을 충분히 즐기신 분! (저희는 대학생이 사용하는 서비스입니다^^)&lt;/li&gt;
  &lt;li&gt;UX, UI, BX 등 폭 넓은 디자인 경험을 쌓고 싶으신 분&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-6&quot;&gt;복리후생&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정규직 채용&lt;/li&gt;
  &lt;li&gt;연봉제, 4대보험, 퇴직금&lt;/li&gt;
  &lt;li&gt;점심식사 지원&lt;/li&gt;
  &lt;li&gt;도서구매비 지원&lt;/li&gt;
  &lt;li&gt;컨퍼런스 참가비 등 각종 업무 관련 교육비용 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;지원방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;resume, 포트폴리오 (형식 자유) 를 jobs@add2paper.com 으로 보내주세요.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-8&quot;&gt;언론보도&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://search.daum.net/search?w=news&amp;amp;cluster=n&amp;amp;q=%EC%95%A0%EB%93%9C%ED%88%AC%ED%8E%98%EC%9D%B4%ED%8D%BC&amp;amp;sort=1&quot;&gt;‘애드투페이퍼’ 최신 기사 검색&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Hooking COM Functions for fun and profit</title>
      <link>http://add2paper.github.io/2015/06/24/Hooking-COM-Functions/</link>
      <pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2015/06/24/Hooking-COM-Functions</guid>
      <description>&lt;style&gt;
.image-wrapper {
    text-align: center;
}

.image-caption {
	display:block;
    color: #777;
    font-size:.8em;
    margin-top:-.8em;
    margin-bottom:1.2em;
}
&lt;/style&gt;

&lt;p&gt;안녕하세요. &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;에서 클라이언트 개발을 맡고 있는 박경덕이라고 합니다.&lt;br /&gt;
지난번 &lt;a href=&quot;/2015/06/15/Complex-API-Hooking-Model/&quot;&gt;API 후킹 꿀팁 모음&lt;/a&gt;에 이어 오늘은 COM 객체의 함수를 후킹하는 법을 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;com&quot;&gt;COM&lt;/h2&gt;

&lt;p&gt;COM 함수를 후킹하려면 먼저 COM이 뭔지를 좀 알아봐야 할 거 같습니다. COM이 뭘까요?&lt;br /&gt;
&lt;del&gt;저도 잘 몰라요. 깔깔깔깔&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;MS에서 정의하고 있는 바에 의하면 COM은 &lt;strong&gt;서로 다른 프로세스 혹은 머신 사이에서 어떤 객체를 쉽게 다루기 위한 기술&lt;/strong&gt;이라고 합니다.
여기서 객체란 어떤 기능을 수행하는 클래스라고 보시면 될 것 같습니다.
COM의 상세한 스펙이나 동작 원리 등에 관해서도 물론 쓸 수는 있지만, 오늘의 주제에서 벗어난 내용이기도 하고 내용도 너무 기므로 관심 있으신 분들은 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms694363(v=vs.85).aspx&quot;&gt;여기&lt;/a&gt;를 참고하세요. (몰라서 그러는 거 아닙니다. 진짜)&lt;/p&gt;

&lt;h2 id=&quot;com-&quot;&gt;COM 인터페이스&lt;/h2&gt;

&lt;p&gt;COM 객체의 실제 구현 부는 사용자의 눈에 안 보이도록 숨겨져 있습니다. 대신, 이 기능을 사용할 수 있도록 인터페이스를 두어 간접적인 접근을 허용합니다.
이러한 인터페이스는 실제 런타임에 객체의 CLSID와 IID를 이용하여 인스턴스를 생성하기 전까지는 단순한 껍데기에 불과합니다.
가령 C++에서 COM 인터페이스는 이런 식으로 선언되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot;&gt;
    &lt;img src=&quot;/images/com_interface.png&quot; alt=&quot;&quot; /&gt;
    
    &lt;span class=&quot;image-caption&quot;&gt;그림1 - IFileOpenDialog 인터페이스&lt;/span&gt;
    
&lt;/div&gt;

&lt;p&gt;왠지 폼나게 생긴 것 같지만 결국 길바닥에 널린 한낱 구조체에 불과합니다. 안에 들어있는 함수들이 전부 순수 가상 함수로 선언된 거 보이시죠?
껍데기라니까요.&lt;/p&gt;

&lt;p&gt;‘그럼 뭐 어쩌라고?’ 라고 생각하실 분들을 위해 지금부터 실제 API를 가지고 후킹을 하는 과정을 하나하나 따라가 보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;우리는 한다 후킹을&lt;/h2&gt;

&lt;p&gt;Windows Vista 이상부터 파일 열기/저장 Dialog를 위한 COM 객체가 새로 추가되었으며, 이러한 Dialog를 Common Item Dialog라고 부릅니다.
오늘은 여기에 사용되는 API 중 하나를 골라 후킹 해보겠습니다.&lt;/p&gt;

&lt;p&gt;파일을 열 때 나타나는 Dialog는 다음과 같이 생겼습니다.&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot;&gt;
    &lt;img src=&quot;https://i-msdn.sec.s-msft.com/dynimg/IC420398.png&quot; alt=&quot;&quot; /&gt;
    
    &lt;span class=&quot;image-caption&quot;&gt;그림2 - 크고 아름다운 Dialog&lt;/span&gt;
    
&lt;/div&gt;

&lt;p&gt;오 꽤 깔쌈합니다. 이런 걸 띄우려면 &lt;strong&gt;IFileOpenDialog&lt;/strong&gt; 라고 하는 인터페이스를 사용해야 합니다(그림1에 있습니다). 기왕 말이 나온 김에 어떻게 쓰는 건지나 한번 봅시다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;atlbase.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;ShObjIdl.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CoInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CComPtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IFileOpenDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoCreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLSID_FileOpenDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLSCTX_ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CComPtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IShellItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이걸 후킹 해봅시다.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;PWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGDN_FILESYSPATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wcout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;CoTaskMemFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CoUninitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;어때요. 참 쉽죠?&lt;/p&gt;

&lt;p&gt;그림1에서 볼 수 있듯이 &lt;strong&gt;IFileOpenDialog&lt;/strong&gt; 인터페이스는 &lt;strong&gt;IFileDialog&lt;/strong&gt;를 상속하고 있고 대부분의 API는 &lt;strong&gt;IFileDialog&lt;/strong&gt;에 구현되어 있습니다.
실제 사용 가능한 API는 이것저것 많지만, 지금은 별 필요 없는 것들이기 때문에 관심 있으신 분들은 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb775966(v=vs.85).aspx&quot;&gt;참고문헌&lt;/a&gt;을 참고하시면 되겠습니다.&lt;/p&gt;

&lt;p&gt;이제 위 코드에서 후킹 할 API를 찾아야 하는데 &lt;strong&gt;GetResult&lt;/strong&gt; 말고는 아무리 눈을 씻고 찾아보아도 쓸 만한 게 보이질 않습니다(GetResult는 IFileDialog에 선언되어 있습니다). 이 API를 후킹 하면 특정 파일 혹은 모든 파일을 못 열게 한다든지 정해진 시간대에서는 파일을 못 열게 한다든지 하는 &lt;del&gt;변태적인&lt;/del&gt;재미난 일을 할 수가 있을 겁니다.&lt;/p&gt;

&lt;p&gt;후킹을 하려면 후킹 할 API의 주소, 즉 구현 부의 주소를 알아야 합니다. 그런데 앞에서 COM 객체의 구현 부는 숨겨져 있다고 했단 말이죠…
컴파일러는 대체 어떻게 주소를 알아낼까요? 아무래도 저 예제 프로그램을 직접 분석해볼 수밖에 없을 것 같습니다.&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot;&gt;
    &lt;img src=&quot;/images/com_disasm.png&quot; alt=&quot;&quot; /&gt;
    
    &lt;span class=&quot;image-caption&quot;&gt;그림3 - WinDBG로 분석한 결과&lt;/span&gt;
    
&lt;/div&gt;

&lt;p&gt;불필요한 부분은 깔끔히 쳐내고 GetResult 함수를 호출하는 부분만 잘라왔습니다. 짧은 코드지만 이 부분의 루틴을 이해해야 나중에 실제로 후킹 코드를 작성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;함수 호출 전 코드 세 줄을 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ebp-104h&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# ebp - 104h에는 IFileOpenDialog 객체의 주소가 담겨 있습니다.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# IFileOpenDialog의 vtable을 가져옵니다.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# vtable + 50h에 GetResult의 주소가 있나 보군요.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;코드 편집 과정에서 잘렸지만, ebp-104h에는 &lt;strong&gt;IFileOpenDialog&lt;/strong&gt; 객체 인스턴스의 주솟값이 들어 있습니다. 코드 첫 줄에서는 먼저 이 값을 ecx 레지스터에 저장합니다.
그리고 다음 줄에서 그 주소를 다시 참조하여 edx 레지스터에 저장하는데 저게 뭐 하는 거죠?&lt;/p&gt;

&lt;p&gt;C++에서 클래스가 가상 함수를 갖는 경우 이를 동적으로 binding 하기 위한 메커니즘이 필요합니다. 이를 위해 대부분 컴파일러는 vtable을 이용합니다.
각 가상 함수에 대해 실제 호출되어야 하는 함수의 주소를 배열로 저장해두는 것이죠.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 보통 이 vtable의 주소는 인스턴스 메모리의 가장 처음에 저장됩니다.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
두 번째 줄이 하는 일은 바로 이 vtable의 주소를 가져오는 겁니다.&lt;/p&gt;

&lt;p&gt;원칙적으로 vtable은 일개 프로그래머 따위가 함부로 건드릴 만한 것이 못 됩니다. 건드려서도 안 돼요. 하지만 어쩌겠어요? 방법이 없는걸. 껄껄껄&lt;/p&gt;

&lt;p&gt;마지막 줄에서는 가져온 vtable에서 GetResult 함수의 주소를 구하고 있습니다.
32bit 환경에서 테스트한 코드이기 때문에 주소의 크기가 4바이트라는 것을 생각하면 vtable[0x50 / 4]에 GetResult 함수 주소가 있겠군요.
역시 다른 데서 이러면 혼납니다.&lt;/p&gt;

&lt;p&gt;좋습니다. 이제 GetResult의 주소를 구할 수 있습니다. 하지만 아직 API가 요구하는 정확한 인자(Parameter) 정보가 부족합니다. 함수를 한 번 뜯어(?)봅시다.&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot;&gt;
    &lt;img src=&quot;/images/com_disasm2.png&quot; alt=&quot;&quot; /&gt;
    
    &lt;span class=&quot;image-caption&quot;&gt;그림4 - GetResult 함수의 속살&lt;/span&gt;
    
&lt;/div&gt;

&lt;p&gt;GetResult는 CFileOpenSave 클래스의 멤버 함수입니다. 그런데 흥미롭게도 Calling convention이 thiscall이 아니라 stdcall이네요?
일반적으로 비정적 클래스 멤버 함수의 경우 ecx 레지스터를 통해 this 객체가 전달되는 것이 규칙이지만&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, COM 특성상 그렇게 사용할 수는 없습니다.
그래서 stdcall을 사용하고 this 객체를 스택을 통해 넘깁니다(그림3의 0x1bb1e6번지와 0x1bb1ed번지 두 곳에서 인자를 push 하는 것을 확인해보세요).&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;후킹 코드 작성&lt;/h2&gt;

&lt;p&gt;이제 모든 준비가 됐습니다. 후킹 할 함수의 주소도 알아낼 수 있고, 그 함수의 실제 Prototype도 확인했습니다.
이전 포스트에서 배운 꿀팁을 이용하여 간단하게 후킹 코드를 작성해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 선언부&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HRESULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STDMETHODCALLTYPE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFileDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetResultFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IShellItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OverrideHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetResultFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetResultHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 생략...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CComPtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IFileOpenDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoCreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLSID_FileOpenDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLSCTX_ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pvtable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// vtable의 주소를 구해옵니다.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pvtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vtable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pvtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 실제 vtable을 구해옵니다.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 32bit 환경에서 테스트했기 때문에 4로 나눠줍니다.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;GetResultHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IFileDialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IShellItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 먼저 원본 함수를 호출하여 결과를 얻어옵니다.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetResultHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 이제 여기서 재미난 작업들을 합니다.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 결과를 리턴합니다(재미난 작업에 따라 ret 값이 바뀔 수도 있겠네요).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;별다른 설명이 필요 없을 정도 심플하고 깔끔합니다. 절로 미소가 지어지네요(&lt;del&gt;사실 테스트는 안 해ㅂ…&lt;/del&gt;).&lt;/p&gt;

&lt;p&gt;그렇다고 진짜 아무 설명도 없이 넘어가면 모양새가 좀 그러니 굳이 하나를 집어보자면 23번째 라인에 원본 함수를 호출하는 부분의 문법이 좀 특이하다는 걸 볼 수 있습니다.
-&amp;gt; 다음에 *가 붙다니… 아무리 봐도 마음에 들지 않는 모양새입니다. 그런데 이게 하나의 연산자랍니다. 정말이에요. 아직도 못 믿겠다 하시는 분들은 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/k8336763.aspx&quot;&gt;이거&lt;/a&gt; 한 번 보세요. 진짜죠?&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;COM 함수를 후킹 하는 것은 사실 저도 이번에 클라이언트를 개발하면서 처음 해봤습니다.
이 글에는 그냥 이렇게 저렇게 하면 된다고 굉장히 간단하게 썼지만, 실제 처음 개발할 때는 이런저런 시행착오를 많이 겪었습니다.
API 함수의 주소를 구하는 법도 많이 고민하고 Calling convention을 맞추느라 삽질도 많이 했죠…
그래도 결국은 어떻게든 방법을 찾아서 기능도 구현하고 이렇게 글도 쓰고 하니 기쁘네요 :)&lt;/p&gt;

&lt;p&gt;본문에서도 언급했지만 제가 후킹 코드에 쓴 것처럼 vtable이나 가상 함수 오프셋 등을 직접 가지고 노는 것은 절대 추천할 만한 게 못 됩니다.
저런 애들이랑 놀다간 언제 어떻게 멘탈이 터질지 알 수 없단 말입니다.
저는 다른 방법이 도저히 떠오르지 않아서 어쩔 수 없이 사용했지만, 혹시 이 글을 읽으신 여러분들 중 더 좋은 방법을 찾으신 분이 계신다면 당장 저놈들을 내쫓으셔야 합니다.&lt;br /&gt;
물론 저한테도 좀 알려주세요!&lt;/p&gt;

&lt;p&gt;그럼 이쯤에서 이만 줄이고 다음번에 더 흥미로운 주제로 찾아뵙도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;사실 C++ 표준에 의하면 가상 함수 binding은 런타임에 하게 되어 있지만, 성능상의 이유로 대부분 이를 컴파일 타임에 처리합니다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;그렇다고 vtable이 항상 오프셋 0에 있을 거라고 장담할 순 없습니다. 컴파일러 제작사마다 vtable을 다른 곳에 저장할 수도 있고, 다중 상속이나 가상 상속이 쓰이는 경우 오프셋이 달라질 수도 있습니다. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;32bit Visual C++ 환경일 경우에만 해당합니다. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    
    
    <item>
      <title>API Hooking Honey-Butter Tips</title>
      <link>http://add2paper.github.io/2015/06/15/Complex-API-Hooking-Model/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2015/06/15/Complex-API-Hooking-Model</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;의 시스템 개발자 오지헌입니다. API 후킹을 통해 조금 복잡한 애플리케이션을 개발하고 싶은 분들을 위해 몇 가지 팁을 모아봤습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;후킹 방법 선택하기&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;커널레벨&lt;/h3&gt;

&lt;p&gt;루트킷이나 백신 등이 사용하는 가장 높은 권한의 후킹 방식입니다.
개발 난이도는 높습니다.
요즘은 코드사인이 되지 않은 드라이버는 메모리에 로딩하는 것 조차 불가능하기 때문에 여러 의미로 개인 개발자들이 사용하기 힘든 후킹 방법입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;드라이버 개발, HW/OS 지식이 필요
사소한 실수에 블루스크린을 볼 수 있음
OS별, CPU 아키텍처별 별도 개발이 필요
코드사이닝 인증서 필요
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;유저레벨&lt;/h3&gt;

&lt;p&gt;주로 DLL을 작성하여 프로세스 단위에 적용하는 안정성, 호환성이 높은 후킹 방식입니다. 추천.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IAT 후킹&lt;/p&gt;

    &lt;p&gt;대표적 유저레벨 후킹 방식의 하나로, 모듈 별 후킹 여부를 결정할 수 있습니다. API의 주소가 담긴 테이블을 수정하는 식으로 작동합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trampoline&lt;/p&gt;

    &lt;p&gt;API의 코드를 직접 패치하는 방식입니다. 때문에 후킹이 한 프로세스 내에서 전역적으로 적용됩니다. 제대로 구현하기가 IAT 후킹에 비해 훨씬 까다롭습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;글로벌 후킹&lt;/h2&gt;

&lt;p&gt;유저레벨 API 후킹을 하게 된다면 한 가지 문제가 생깁니다. &lt;br /&gt;
윈도우에서 모든 프로세스는 각각 독립적인 가상메모리 공간을 가지고 있으므로, API 후킹은 한 프로세스에 대해서만 적용됩니다. &lt;br /&gt;
때문에 글로벌 후킹을 위해선 모든 프로세스에 각각 후킹을 걸어주어야 합니다.&lt;/p&gt;

&lt;p&gt;가장 간단한 방법으로 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990.aspx&quot;&gt;SetWindowsHookEx&lt;/a&gt; API를 사용하는 방식을 추천합니다. &lt;br /&gt;
후킹을 거는 Dll을 작성하고, 위 API로 Dll이 ‘윈도우를 사용하는 모든 프로세스’에 로드되도록 명령하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;허니버터꿀팁&lt;/h2&gt;

&lt;p&gt;API 후킹의 개발 방법론이나 팁은 구글에서도 쉬이 찾을 수 없기에, 간략히 정리해봅니다. &lt;br /&gt;
우선 다른 어플리케이션이 특정 프로세스(이름이 abc로 시작하는 프로세스)를 종료하지 못하게 막는 상황을 가정해보겠습니다. &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;소유권 관리&lt;/h3&gt;
&lt;p&gt;API 후킹에 핸들/객체 소유권 관리의 개념이 도입되면 간단한 구현으로 매우 큰 개발 생산성 향상을 취할 수 있습니다.&lt;/p&gt;

&lt;p&gt;우선 종료 요청을 수정해야하기 때문에 TerminateProcess의 후킹은 필수적입니다.
TerminateProcess의 원형은 아래와 같습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    BOOL WINAPI TerminateProcess(
        _In_ HANDLE hProcess,
        _In_ UINT   uExitCode
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;소유권 관리 개념이 없다면, 아마 후킹 프로시저는 아래과 같아질 겁니다(슈도코드).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    HookedTerminateProcess(process, exitCode)
    {
        name = getProcessName(process)
        if checkAllowedProcessName(name) then 호출허용
        else 호출거부
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;척 보기에도 문제점이 많습니다. &lt;br /&gt;
getProcessName, checkAllowedProcessName는 매번 호출되기에는 무거워보입니다. 뿐만 아니라 주어진 핸들의 권한이 부족해 getProcessName 함수가 실패할 수도 있습니다!&lt;/p&gt;

&lt;p&gt;소유권 관리 개념이 추가되면, 코드는 아래와 같아집니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Process::Process(handle, pid, access, ...)
    {
        allowed = checkAllowedProcess(...);
        handle_ = handle;
        pid_ = pid;
    }
    Process::~Process()
    { handle 등 정리 }

    HookedOpenProcess(pid, access, ...)
    {
        opened_handle = OriginalOpenProcess(...)
        if opened_handle != null then processes.add(shared_ptr&amp;lt;Process&amp;gt;(new Process(opened_handle, pid, access, ...)));
        return opened_handle
    }
    HookedCloseHandle(handle)
    {
        if processes.exists(handle) then processes.remove(handle)
        else return OriginalCloseHandle(...)
    }
    HookedTerminateProcess(process, exitCode)
    {
        myProcess = processes.find(process)
        if myProcess-&amp;gt;IsAllowed() then 호출허용
        else 호출거부
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;OpenProcess와 CloseHandle이 추가적으로 후킹됐습니다. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;OpenProcess에선 내부적으로 Process객체를 만들어 프로세스 핸들의 소유권을 넘겨주며&lt;br /&gt;
  CloseHandle에선 Process객체의 reference counter를 하나 줄입니다. &lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;checkAllowedProcess()는 핸들 별로 단 한번만 호출되어 성능이 향상됩니다. &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;핸들뿐 아니라 pid가 주어졌기 때문에 원하는 권한으로 프로세스 이름을 쿼리할 수 있습니다. &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;핸들을 가지고 해당 핸들의 pid나 access rights를 알아낼 수 있습니다. &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;또한, CloseHandle이 호출되더라도 핸들을 즉시 닫지 않고 원하는 만큼 사용하다 닫을 수 있습니다. &lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개이득.&lt;/p&gt;

&lt;h3 id=&quot;setlasterror&quot;&gt;SetLastError&lt;/h3&gt;

&lt;p&gt;후킹 프로시저 내에서 요청을 거부했을 경우, 단순히 FALSE를 리턴하지 않고 SetLastError()를 사용해 실패 이유를 알려주면 오동작을 방지할 수 있습니다. &lt;br /&gt;
가령, TerminateProcess 요청을 실패시킬 때&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SetLastError(ERROR_ACCESS_DENIED)
    return FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;로 오류코드를 ERROR_ACCESS_DENIED로 명시적으로 설정해주면 잘 만든 프로그램들은 스스로 GetLastError()로 오류코드를 체크해 그에 맞는 메세지를 출력해주거나 별도의 작업을 수행합니다.&lt;/p&gt;

&lt;h3 id=&quot;meta-programming&quot;&gt;Meta programming&lt;/h3&gt;

&lt;p&gt;Variadic Template을 사용하면&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Hook::OverrideHook&amp;lt;decltype(&amp;amp;MessageBoxA)&amp;gt; messageBoxAHook // 선언

    messageBoxAHook.Install(
        api주소,
        [this](...) // 후킹프로시저
    {
        return messageBoxAHook(hWnd, &quot;[hooked] &quot; + lpText, ...)
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 편하고 type-safe한 API 후킹을 할 수 있다. &lt;br /&gt;
물론 함수 prototype만 보고 hooking stub을 만들어야 하기 때문에 머리가 빠개집니다.&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;마치며&lt;/h3&gt;
&lt;p&gt;쓰다보니 점점 귀찮아져서 내용이 부실해지네요. 나머진 다음 글에서!&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;유용한 글&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.reversecore.com/54&quot;&gt;http://www.reversecore.com/54&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/2082/API-hooking-revealed&quot;&gt;http://www.codeproject.com/Articles/2082/API-hooking-revealed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>More Python 2 - Patch C Module</title>
      <link>http://add2paper.github.io/2015/06/01/More-Python-2-Path-C-Module%20-%20Copy/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2015/06/01/More-Python-2-Path-C-Module - Copy</guid>
      <description>&lt;p&gt;안녕하세요, &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;의 &lt;a href=&quot;http://www.parkayun.kr&quot;&gt;박아윤&lt;/a&gt;입니다. &lt;br /&gt;
&lt;a href=&quot;/2014/12/01/More-Python-1-Copy/&quot;&gt;첫 번째 More Python&lt;/a&gt;을 작성하고 정확히 반년 뒤, 의병의 날인 오늘 그 두 번째 글을 작성하게 되었습니다. 하하&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;patch&quot;&gt;Patch&lt;/h2&gt;
&lt;p&gt;이번에 다룰 내용은 흔히들 Monkey Patch라고들 부르는 Patch에 관한 이야기입니다.&lt;br /&gt;
Python에서는 이러한 Patch를 아래와 같이 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;patch_django&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Flask!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_django&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;Flask!&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이렇게 Python의 은혜를 받아 매우 손쉽게 Patch를 할 수 있습니다. &lt;br /&gt;
이런 은혜에도 불구하고 문제점이 하나 있는데요, 아래와 같이 코드를 보면 Patch가 원활히 되지 않습니다. :(&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;patch_today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;t set attributes of built-in/extension type &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;datetime.date의 속성을 지정할 수 없다고 합니다. (C 모듈은 Monkey Patch를 할 수 없습니다.)&lt;br /&gt;
일단 영문을 모르겠으니 묻지도 따지지도 않고 파일을 찾아 디버깅을 해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;/Somewhere/lib/python2.7/lib-dynload/datetime.so&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;아니! Python 파일이 아닙니다. C로 작성된 모듈 같은데 이제 어쩌죠? (저는 Python밖에 모른다고요…)&lt;br /&gt;&lt;del&gt;이제 이만 글을 마칩니다. 읽어주셔서 감사합니다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;하늘이 무너져도 솟아날 구멍이 있다더니 ctypes 모듈을 이용하면 이러한 c로 작성된 모듈이나 외부 라이브러리를 다룰 수 있습니다. 그러면 ctypes를 이용해 dir와 비슷해 보이는, 속성들을 가져오는 get_dict를 작성하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ctypes&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pythonapi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_PyObject_GetDictPtr&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argtypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이제 이 get_dict를 이용해서 Patch를 해봅니다!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;today&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_today&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;오, 오 되었습니다. 이제 실행을 해보면!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unbound&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nothing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이제는 다른 오류가 반겨줍니다. 아무래도 date의 규격에 맞지 않는 것 같습니다.&lt;br /&gt;클래스로 다시 Patch 코드를 작성해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PatchDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;다시 한번 Patch를 하고 실행을 해보면!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;today&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PatchDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;뙇!&lt;/p&gt;

&lt;p&gt;Patch를 성공적으로 수행했으니 이만 글을 마칩니다. 읽어주셔서 감사합니다.&lt;br /&gt;
(첫 번째 글이 너무 진지한 것 같아 이번에는 가벼운 느낌으로 글을 작성해보았습니다.)&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6738987/extension-method-for-python-built-in-types&quot;&gt;http://stackoverflow.com/questions/6738987/extension-method-for-python-built-in-types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/ctypes.html&quot;&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>프로덕트 매니저 채용 공고</title>
      <link>http://add2paper.github.io/2015/03/16/Add2paper-Recuriting-Product-Manager/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2015/03/16/Add2paper-Recuriting-Product-Manager</guid>
      <description>&lt;p&gt;우리나라는 대학 진학률이 70%에 이릅니다. 한국의 경제인구 대부분이 대학생이거나, 대학생이었습니다. &lt;br /&gt;
&lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;는 ‘대학생’과 ‘대학캠퍼스’타겟에  독점적 영향력을 갖는 모바일플랫폼으로 성장하고자 합니다.&lt;br /&gt;
이미 한국의 규모 있는 대학 70%에 애드투페이퍼 무료프린팅ZONE이 제휴 되어있습니다. 또한 ‘애딧’포인트를 기반으로 대학생들의 모바일 소비 생활을 혁신하고 있습니다. &lt;br /&gt;
우리에게 무료프린팅서비스는 종착점이 아닌 출발점입니다. 2015년에는 대학생들이 학교에 가는 길, 점심을 먹을 때, 커피를 마실 때, 저녁을 먹을 때마다 ‘애딧’을 통해 보다 합리적이고 즐거운 소비생활을 하게 될 것입니다!&lt;br /&gt;
우리 대학생들의 삶을 바꾸어갈 핵심서비스를 함께 만들며 성장할 PM을 모십니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;애드투페이퍼는 이렇게 일합니다&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;애자일 방법론인 스크럼을 이용한 가볍고 탄력적인 개발 문화 (업무 관리 툴로는 Redbooth / 커뮤니케이션 툴로는 Hipchat을 사용합니다.)&lt;/li&gt;
  &lt;li&gt;사무실 미니바에 설치된 지표 확인용 모니터를 보면서 관심 있는 직원들 끼리 자유롭게 토론 (에스프레소 머신 덕분에 식후 커피 한잔은 기본! ^^)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;애드투페이퍼는 이런 분을 찾습니다&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;웹서비스 / 모바일앱에 대한 높은 이해도가 있으신 분&lt;/li&gt;
  &lt;li&gt;UX 디자인에 대한 이해가 있으신 분&lt;/li&gt;
  &lt;li&gt;높은 커뮤니케이션 능력 및 팀플레이 능력을 갖추신 분&lt;/li&gt;
  &lt;li&gt;대학 생활 혁신에 대한 비전이 있으신 분&lt;/li&gt;
  &lt;li&gt;데이터에 기반한 의사 결정에 열의가 있으신 분&lt;/li&gt;
  &lt;li&gt;소셜커머스 또는 O2O관련 프로덕트 매니징 경력을 우대합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;애드투페이퍼에 입사하시면 이런 일을 하게 됩니다&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;대학생들이 애드투페이퍼 쉽고 편하게 쓸 수 있도록 서비스를 끊임없이 개선하고 새로운 기능들을 기획합니다.

&lt;ol&gt;
&lt;li&gt;구글플레이 리뷰 평점 4.8 &amp;amp; 앱스토어 리뷰 별 5개! 애드투페이퍼 모바일 앱은 다음과 같은 기능들을 제공하고 있습니다. (&lt;a href=&quot;http://www.add2paper.com/m_api/download/android/&quot;&gt;안드로이드&lt;/a&gt; / &lt;a href=&quot;http://www.add2paper.com/m_api/download/ios/&quot;&gt;아이폰&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;대학생들에게 유익한 광고 캠페인들을 쉽고 빠르게 찾아보고 애딧 적립하기&lt;/li&gt;
&lt;li&gt;애드투페이퍼 앱 안에서 바로 배달 주문 하고 추가 애딧 적립하기 (현재 Beta 서비스 성공적으로 진행 완료. 2015년 상반기에 정식 기능으로 출시 예정.)&lt;/li&gt;
&lt;li&gt;기타 대학생활에 꼭 필요한 기능들을 쉽고 빠르게 이용하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3,000여대의 애드투페이퍼 전용 PC에 설치된 윈도우 클라이언트는 다음과 같은 기능을 제공하고 있습니다.

&lt;ul&gt;
&lt;li&gt;일반 프린터를 사용하듯이 애드투페이퍼 프린터를 선택하고 인쇄하면 끝! - 애드투페이퍼 윈도우 클라이언트는 지구 상에서 전무후무한 seamless 한 무료 프린팅 경험을 제공합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;애드투페이퍼가 제공하고 있는 광고주 &amp;amp; 프린터 관리자 분들을 위한 강력한 실시간 리포트 사이트를 끊임없이 개선합니다.&lt;/li&gt;
&lt;li&gt;이 외에도 대학 생활 혁신을 위한 흥미로운 일들이 기다리고 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;복리후생&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;회사 위치 : &lt;a href=&quot;http://map.naver.com/local/siteview.nhn?code=13468464&quot;&gt;서울특별시 강남구 역삼동 799-5, 대일빌딩 3층&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;건물 한 층을 전부 사용하는 쾌적한 사무실&lt;/li&gt;
  &lt;li&gt;연봉제, 4대보험, 퇴직금, 인센티브&lt;/li&gt;
  &lt;li&gt;점심 식대 지원&lt;/li&gt;
  &lt;li&gt;도서 구매비 지원&lt;/li&gt;
  &lt;li&gt;컨퍼런스 참가비 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;지원방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;resume, 포트폴리오 (형식 자유) 를 jobs@add2paper.com 으로 보내주시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;회사 소개 및 언론 보도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.add2paper.com/about/&quot;&gt;회사 소개&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.add2paper.com/about/#press&quot;&gt;언론 보도&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FTOkQE-oqF8&quot;&gt;애드투페이퍼 서비스 소개 동영상&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>리버스 엔지니어 채용 공고 - 신입 / 경력 (산업기능요원 보충역 / 전직 가능)</title>
      <link>http://add2paper.github.io/2015/02/23/Add2paper-Recruiting-Reverse-engineer/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2015/02/23/Add2paper-Recruiting-Reverse-engineer</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;는 20대 대학생 타겟 미디어입니다. 2014년 하반기에는 통합 가상 화폐 ‘애딧’과 API 서비스를 오픈하여 다양한 대학생 편의 서비스와 빠른 속도로 제휴를 진행하고 있습니다. &lt;u&gt;2015년 2월 23일 현재까지 100여 개 대학교에 제휴 된 2,300여 대의 애드투페이퍼 PC를 통해 40만 명의 회원이 2,600만여 장의 인쇄를 하였습니다. 2015년 상반기에는 속도감 있는 제휴를 통해 140여 개 대학교 3,500여 대 PC로 확장 예정입니다.&lt;/u&gt; 대학생 타겟 미디어를 넘어 대학생 통합 편의 서비스로 진화하고 있는 애드투페이퍼에서 실력 있는 개발자분들을 모십니다. &lt;b&gt;&lt;u&gt;산업기능요원(보충역 / 전직) 또한 가능합니다.&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;애드투페이퍼에서 새로 개발 중인 윈도우 클라이언트 4.0 버전은 기존의 Virtual Printer Driver 개발 방식에서 탈피하여 프린터 관련 Windows API 후킹을 통해 타겟 물리 프린터의 종류에 상관없이 프린터 고유의 모든 기능을 사용할 수 있는 혁신적인 고성능 클라이언트입니다. 기존의 Virtual Printer Driver 개발 방식으로는 빠르게 발전하는 물리 프린터의 모든 고유 기능을 유연하고 빠르게 지원하기 어려워 해당 개발 방식을 도입하였습니다. 현재 32bit 버전은 개발 완료 후 QA 중이고 상반기에 64bit 버전을 개발하고 릴리즈할 예정입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;애드투페이퍼 윈도우 클라이언트 4.0 스펙&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;UI : C#, .Net Framework 4.5, WPF&lt;/li&gt;
  &lt;li&gt;Hooking DLL : C++&lt;/li&gt;
  &lt;li&gt;클라이언트 - 서버 통신 : HTTPS 프로토콜을 이용한 REST API 호출 (인쇄 로직에서는 암호화된 인증 토큰을 서버와 주고받아서 인증된 클라이언트인지 여부를 추가로 체크합니다.)&lt;/li&gt;
  &lt;li&gt;Themida 패킹&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;담당 업무&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;리버스 엔지니어링 및 Hooking DLL 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;지원 자격&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;리버스 엔지니어링에 대한 기본적인 이해&lt;/li&gt;
  &lt;li&gt;x86/x64 아키텍처에 대한 기본적인 이해&lt;/li&gt;
  &lt;li&gt;C++ 언어에 대한 기본적인 이해&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;애드투페이퍼 산업 기능요원 지원 가능 조건&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;현역 (신체검사 1~3급) : 96년생 특성화고 졸업자만 가능&lt;/li&gt;
  &lt;li&gt;보충역 (신체검사 4급) : 추가 조건 없이 가능&lt;/li&gt;
  &lt;li&gt;전직 : 전직 가능자&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;개발 문화&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Github, Github Issues, Hipchat을 사용한 가볍고 탄력성 있는 개발 문화를 지향합니다.&lt;/li&gt;
  &lt;li&gt;새로운 기술을 적극적으로 검토하고 실험합니다. 기술 스택도 마음대로 선택 가능합니다. 다만 충분한 테스트 코드 작성 및 검토가 선행됩니다.&lt;/li&gt;
  &lt;li&gt;하기 싫은 일을 강요하는 사람은 없습니다. 모든 개발 방향을 토론을 통해 결정됩니다.&lt;/li&gt;
  &lt;li&gt;낮에 똑똑하게 열심히 일하고 야근은 절대로 하지 않습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;복리후생&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;회사 위치 : &lt;a href=&quot;http://map.naver.com/local/siteview.nhn?code=13468464&quot;&gt;서울특별시 강남구 역삼동 799-5, 대일빌딩 3층&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;건물 한 층을 전부 사용하는 쾌적한 사무실&lt;/li&gt;
  &lt;li&gt;개발에 필요한 모든 장비 지원&lt;/li&gt;
  &lt;li&gt;연봉제, 4대보험, 퇴직금, 인센티브&lt;/li&gt;
  &lt;li&gt;점심 식대 지원&lt;/li&gt;
  &lt;li&gt;도서 구매비 지원&lt;/li&gt;
  &lt;li&gt;컨퍼런스 참가비 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;지원방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;수시 채용입니다. 언제든지 연락주세요.&lt;/li&gt;
  &lt;li&gt;resume, 포트폴리오 (형식 자유) 를 jobs@add2paper.com 으로 보내주시면 됩니다. (개인 블로그, 홈페이지, 또는 Github 계정을 함께 보내주시면 좋습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;회사 소개 및 언론 보도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.add2paper.com/about/&quot;&gt;회사 소개&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.add2paper.com/about/#press&quot;&gt;언론 보도&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>More Python 1 - Copy</title>
      <link>http://add2paper.github.io/2014/12/01/More-Python-1-Copy/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/12/01/More-Python-1-Copy</guid>
      <description>&lt;p&gt;안녕하세요, &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;에서 백엔드를 개발하고 있는 &lt;a href=&quot;http://www.parkayun.kr&quot;&gt;박아윤&lt;/a&gt;입니다.&lt;br /&gt;
이번 포스트부터 Python의 멀고도 가까운 내용을 소개하는 More Python을 연재코자 합니다. &lt;br /&gt;
그 첫 번째 포스트로 Python의 Copy 관련 내용을 풀어보겠습니다!&lt;/p&gt;

&lt;h2 id=&quot;copy&quot;&gt;Copy&lt;/h2&gt;
&lt;p&gt;이 포스트에서 말하고자 하는 Copy는 변수를 복사하는 그 Copy입니다. &lt;br /&gt;예를 들어 아래와 같이 apple 변수 값을  banana 변수에 그대로 대입하는 경우입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;banana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apple&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그럼 그냥 쓰면 되지 문제가 뭐길래 포스팅까지 하느냐? 하면 바로 아래와 같은 경우입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;foo를 초기화하고 bar에 값을 대입하고 foo의 값을 바꿨더니 bar의 값도 따라 바뀌었습니다.&lt;br /&gt;
아래에서 확인할 수 있듯이 값을 대입하면 값에 대한 메모리가 더 할당되는 것이 아닌 기존 값의 메모리 주소를 공유하기 때문에 발생하게 됩니다. 리스트 같은 경우 리스트 자체뿐만 아니라 리스트 내 요소들도 똑같은 주소를 공유합니다. 이러한 Copy를 &lt;strong&gt;Shallow Copy(얕은 복사)&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4433166064&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4433166064&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;140327877880784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140327877880784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;140327876950296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140327876950296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그럼 이러한 현상을 피하기 위해서는 무엇이 필요할까요? 얕은 복사의 반의어인 &lt;strong&gt;Deep Copy(깊은 복사)&lt;/strong&gt;를 이용하면 됩니다. Python에서는 기본적으로 copy 모듈을 제공하고 있어 아래와 같이 사용하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4433166064&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4433319624&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이렇게 Deep Copy를 하더라도 리스트 내 요소들은 여전히 똑같은 값을 공유하고 있습니다. 그러나 얕은 복사와는 다르게 리스트 자체는 다른 값이기 때문에 원본 리스트의 요소가 바뀌었다고 복사된 리스트의 요소에 영향을 끼치지는 않습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;140327876950296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140327876950296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;140327877880712&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140327876950296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Copy 모듈을 쓰지 않고 아래와 같은 방법으로도 Deep Copy와 비슷한 효과를 얻을 수 있습니다. 그러나 여기서 주의할 점은 효과만 비슷할 뿐 Deep Copy가 아닌 Shallow Copy입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;좀 더 구체적으로 사용해보면 바로 Shallow Copy인 이유를 바로 알 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;and-more&quot;&gt;And more?&lt;/h2&gt;
&lt;p&gt;기본적으로 리스트형뿐만 아니라 모든 변수형에 적용되는 사항이나 문자열은 값을 변경하려면 새로 대입해야 하고 튜플은 값을 변경하는 것이 목적도 아니고 바뀌지도 않으니 실질적으로 사용할 수 있는 건 리스트와 사전형입니다. 특히 사전형보다는 리스트를 다룰 때 자주 사용될 수 있으니 실제 코딩하실 때 참고하시면 도움되실듯합니다.&lt;/p&gt;

&lt;p&gt;다른 흥미로운 주제를 가지고 다시 찾아뵙도록 하겠습니다. :D&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>애드투페이퍼 서비스를 같이 혁신할 엔지니어분을 모십니다. (산업기능요원 보충역 / 전직 가능)</title>
      <link>http://add2paper.github.io/2014/11/25/Add2paper-Recruiting2/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/11/25/Add2paper-Recruiting2</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;는 20대 대학생 타겟 미디어입니다. 2014년 하반기에는 통합 가상 화폐 ‘애딧’과 API 서비스를 오픈하여 다양한 대학생 편의 서비스와 빠른 속도로 제휴를 진행하고 있습니다. 대학생 타겟 미디어를 넘어 대학생 통합 편의 서비스로 진화하고 있는 애드투페이퍼에서 실력 있는 개발자분들을 모십니다. &lt;b&gt;&lt;u&gt;애드투페이퍼가 이번에 병역특례회사로 선정되어 산업기능요원(보충역 / 전직) 또한 가능합니다.&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;&amp;lt; 웹서비스 백엔드 개발자 &amp;gt;&lt;/h2&gt;
&lt;p&gt;애드투페이퍼의 서비스의 백엔드는 100% Python으로 만들어져 있습니다. 저희 서비스의 구성 Stack은 &lt;a href=&quot;http://add2paper.github.io/2013/04/17/Add2paper-Technology-Stack/&quot;&gt;“애드투페이퍼 서비스 구성 Stack”&lt;/a&gt; 포스팅에서 확인하실 수 있습니다. 최근에는 API 관련 일부 서비스에 &lt;a href=&quot;http://www.tornadoweb.org/&quot;&gt;Tornado&lt;/a&gt;를 실험적으로 도입하고 있고, 저비용+고성능+고가용성 서버를 만드는 데 관심이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;담당업무&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;애드투페이퍼 서비스 신규 기능 추가 / 신규 서비스 개발&lt;/li&gt;
  &lt;li&gt;애드투페이퍼 API 서비스 개발&lt;/li&gt;
  &lt;li&gt;DevOps (자동화된 배포 시스템을 이용, 누구나 원하는 시간에 언제든지 원클릭으로 배포가 가능합니다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vpd--&quot;&gt;&amp;lt; 윈도우 클라이언트 / VPD 개발자 &amp;gt;&lt;/h2&gt;
&lt;p&gt;애드투페이퍼 윈도우 클라이언트, VPD(Virtual Printer Driver)는 애드투페이퍼 서비스의 핵심입니다. 현재까지 애드투페이퍼클라이언트를 통해 35만 명의 회원이 2500만 장 이상의 출력을 하였습니다. VPD를 통해 기존 프린터 인쇄 방식을 그대로 사용하여 직관적으로 서비스를 사용할 수 있습니다. (또한 프린터 모델과 관계없이 모든 프린터와 호환됩니다.)&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;http://cdn.add2paper.com/media/image/2014/11/141688833323987.jpg&quot; style=&quot;width: 600px&quot; /&gt;
&lt;br /&gt;
(일반 프린터 인쇄와 같이 Add2Paper Printer를 선택하고 인쇄를 하면 VPD에서 전처리 후 윈도우 클라이언트를 실행합니다.)
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://cdn.add2paper.com/media/image/2014/11/141688832599639.jpg&quot; style=&quot;width: 600px&quot; /&gt;
&lt;br /&gt;
(애드투페이퍼 계정으로 로그인 후 &#39;인쇄하기&#39;를 누르면 실제 프린터에서 출력물이 나옵니다.)
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3년간의 축적된 기술을 바탕으로 더 나은 클라이언트와 VPD를 만들기 위해 노력하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;담당업무&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;애드투페이퍼 윈도우 클라이언트 개발 (C# / .Net Framework)&lt;/li&gt;
  &lt;li&gt;VPD 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;특이사항&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;드라이버 관련 개발 지식은 필수는 아닙니다. 다만 윈도우 개발과 관련한 탄탄한 기본기는 필수입니다.&lt;/li&gt;
  &lt;li&gt;현재 윈도우 클라이언트의 UI는 내장된 Chrome (&lt;a href=&quot;https://code.google.com/p/chromiumembedded/&quot;&gt;CEF&lt;/a&gt;) 위에서 동작하는 HTML5 웹앱입니다. 웹 관련 기술에 관심이 있으시면 좋지만 필수는 아닙니다. (UI는 웹개발자들이 담당하고 있습니다. UI 개발은 신경 쓰지 않으셔도 되니 걱정하지 마세요.)&lt;/li&gt;
  &lt;li&gt;현재 기술스택은 언제든지 유연하게 변경이 가능합니다. 내가 만들면 이것보다는 훨씬 잘 만들 수 있겠다는 분들 환영합니다!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;android--&quot;&gt;&amp;lt; Android 개발자 &amp;gt;&lt;/h2&gt;
&lt;p&gt;리뷰 평점 4.8! &lt;a href=&quot;http://www.add2paper.com/m_api/download/android/&quot;&gt;애드투페이퍼 안드로이드앱&lt;/a&gt; 및 신규 앱 개발을 담당할 Android 개발자를 찾습니다. 애드투페이퍼 개발팀은 웹덕후라 Adnroid 앱에도 웹기술이 꽤 많이 쓰이고 있지만, 마음에 안 들면 토론 후 걷어낼 수 있습니다. 더 바람직한 개발 방향을 제시해 주실 분들 언제든지 환영합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;담당업무&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;애드투페이퍼 안드로이드앱 개발 / 신규 기능 추가&lt;/li&gt;
  &lt;li&gt;애드투페이퍼 안드로이드앱 테스트 자동화&lt;/li&gt;
  &lt;li&gt;신규 앱 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ios--&quot;&gt;&amp;lt; iOS 개발자 &amp;gt;&lt;/h2&gt;
&lt;p&gt;리뷰 별 다섯개! &lt;a href=&quot;http://www.add2paper.com/m_api/download/ios/&quot;&gt;애드투페이퍼 아이폰앱&lt;/a&gt; 및 신규 앱 개발을 담당할 iOS 개발자를 찾습니다. 아이폰앱 역시 웹기술이 많이 스며들어있습니다. Android앱과 상당 부분 코드를 공유하고 있고, 높은 생산성과 유연한 수정을 지향하고 있습니다. 마음에 안 드시면 역시 토론후 수정이 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;담당업무&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;애드투페이퍼 아이폰앱 개발 / 신규 기능 추가&lt;/li&gt;
  &lt;li&gt;애드투페이퍼 아이폰앱 테스트 자동화&lt;/li&gt;
  &lt;li&gt;신규 앱 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;개발 문화&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Github, Github Issues, Hipchat을 사용한 가볍고 탄력성 있는 개발 문화를 지향합니다. 최근에 작성된 코드들은 테스트 코드를 작성하고 CI를 통해 자동으로 코드를 검증합니다.&lt;/li&gt;
  &lt;li&gt;새로운 기술을 적극적으로 검토하고 실험합니다. 기술 스택도 마음대로 선택 가능합니다. 다만 충분한 테스트 코드 작성 및 검토가 선행됩니다.&lt;/li&gt;
  &lt;li&gt;하기 싫은 일을 강요하는 사람은 없습니다. 모든 개발 방향은 토론을 통해 결정합니다.&lt;/li&gt;
  &lt;li&gt;낮에 똑똑하게 열심히 일하고 야근은 절대로 하지 않습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;복리후생&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;회사 위치 : &lt;a href=&quot;http://map.naver.com/local/siteview.nhn?code=13468464&quot;&gt;서울특별시 강남구 역삼동 799-5, 대일빌딩 3층&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;건물 한 층을 전부 사용하는 쾌적한 사무실&lt;/li&gt;
  &lt;li&gt;개발에 필요한 모든 장비 지원(iMac, 맥북 등)&lt;/li&gt;
  &lt;li&gt;연봉제, 4대보험, 퇴직금, 인센티브&lt;/li&gt;
  &lt;li&gt;점심 식대 지원&lt;/li&gt;
  &lt;li&gt;원하는 출퇴근 시간, 근무환경 선택 가능&lt;/li&gt;
  &lt;li&gt;도서 구매비 지원&lt;/li&gt;
  &lt;li&gt;컨퍼런스 참가비 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;지원방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;수시 채용입니다. 언제든지 연락주세요.&lt;/li&gt;
  &lt;li&gt;resume, 포트폴리오 (형식 자유) 를 jobs@add2paper.com 으로 보내주시면 됩니다. (개인 블로그, 홈페이지, 또는 Github 계정을 함께 보내주시면 좋습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;언론보도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://search.daum.net/search?w=news&amp;amp;cluster=n&amp;amp;q=%EC%95%A0%EB%93%9C%ED%88%AC%ED%8E%98%EC%9D%B4%ED%8D%BC&amp;amp;sort=1&quot;&gt;‘애드투페이퍼’ 최신 기사 검색&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>테스트와 CI</title>
      <link>http://add2paper.github.io/2014/08/06/Test-And-CI/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/08/06/Test-And-CI</guid>
      <description>&lt;p&gt;안녕하세요, &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;에서 백엔드 개발을 맡은 &lt;a href=&quot;http://www.parkayun.kr&quot;&gt;박아윤&lt;/a&gt;입니다. 이번 블로그 개편에 맞춰 저희가 하고 있는 백엔드 테스트, 장고 테스트에 대하여 공유하고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;현재 애드투페이퍼 백엔드는 API와 웹 서비스로 구성되어있습니다. 이 중에서 API 서비스 테스트에 관하여 소개하고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test?&lt;/h2&gt;
&lt;p&gt;테스트는 흔히 통상적인 개념으로 무엇인가를 검사하는 행위를 지칭합니다.&lt;br /&gt;
&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;소프트웨어 테스트&lt;/a&gt;도 이와 마찬가지로 소프트웨어가 올바르게 의도한 대로 작동하는가를 검사하는 것 이라고 할 수 있습니다. 이러한 소프트웨어 테스트는 버그 발견뿐만 아니라 테스트와 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81&quot;&gt;리팩토링&lt;/a&gt; 과정을 통해서 코드 품질 향상에도 좋은 영향을 이끌어옵니다.&lt;br /&gt;
이런 연유와 유사하게 소프트웨어 개발 기법으로 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%A3%BC%EB%8F%84_%EA%B0%9C%EB%B0%9C&quot;&gt;테스트 주도 개발&lt;/a&gt;이라는 기법도 탄생하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;django-test&quot;&gt;Django Test&lt;/h2&gt;
&lt;p&gt;장고 프레임워크에서는 기본적으로 &lt;a href=&quot;https://docs.djangoproject.com/en/1.7/topics/testing/overview/&quot;&gt;장고 테스트 모듈&lt;/a&gt;을 제공합니다.&lt;br /&gt;
장고 테스트 모듈에는 &lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot;&gt;파이썬 유닛 테스트&lt;/a&gt;와 유사하나 가장 큰 이점은 자동으로 테스트 데이터베이스를 생성해주고 끝나면 삭제까지 해줍니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse


def HelloView(request):
    return HttpResponse(&#39;Hello World&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 HelloView의 기본적인 테스트 조건은 아래와 같습니다.
* Response를 제대로 해주는가
* 의도한 결괏값인가&lt;/p&gt;

&lt;p&gt;위 조건대로 장고 테스트 모듈을 이용하여 테스트 코드를 작성해 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.test import TestCase


class HelloTestCase(TestCase):
    #테스트전 초기화하는 함수입니다.
    def setUp(self):
        self.baseURL = &#39;/&#39;
        
    def test_hello(self):
        url = self.baseURL + &#39;hello/&#39;
        
        #성공 테스트
        res = self.client.get(url)
        self.assertEqual(res.status_code, 200)
        self.assertEqual(res.content, &#39;Hello&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드와 같은 형태로 테스트 코드를 작성할 수 있습니다. 이때 유의할 점은 test_hello와 같이 테스트 함수는 함수명 앞에 test_와 같이 네이밍을 해줘야 합니다. 또한, 이 코드는 간단한 예시이지만 실제로 코드를 작성할 때는 성공하는 테스트뿐만 아니라 실패하는 테스트 코드도 작성해줘야 합니다. 예를 들어 뷰에서 post 요청만을 받는다면 get으로 요청 시에 정상적으로 거절하는지, 실패하는지에 대해서도 테스트를 해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;ci&quot;&gt;CI&lt;/h2&gt;
&lt;p&gt;프로젝트 규모가 커지면 빌드와 테스트하는 데에 많은 자원적, 시간적 비용이 들게 됩니다. 이런 문제점을 해결하기 위해 한 시스템에서 빌드와 테스트를 수행하는데 이를 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81%EC%9D%B8_%ED%86%B5%ED%95%A9&quot;&gt;CI(Continuous Integration)&lt;/a&gt; 시스템이라고 합니다.&lt;br /&gt;
현재 애드투페이퍼에서는 &lt;a href=&quot;https://codeship.io&quot;&gt;codeship.io&lt;/a&gt;이라는 서비스에 소스 코드 저장소의 훅을 걸어 사용하고 있습니다. 코드를 수정하고 저장소에 푸쉬를 하게 되면 아래와 같은 흐름대로 코드 테스트를 진행합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;환경변수 설정&lt;/li&gt;
  &lt;li&gt;저장소 클론&lt;/li&gt;
  &lt;li&gt;저장소 업데이트&lt;/li&gt;
  &lt;li&gt;코드 폴더로 이동&lt;/li&gt;
  &lt;li&gt;의존성 캐쉬 설정&lt;/li&gt;
  &lt;li&gt;가상 머신 설정&lt;/li&gt;
  &lt;li&gt;의존성 설치&lt;/li&gt;
  &lt;li&gt;데이터베이스 싱크&lt;/li&gt;
  &lt;li&gt;테스트 수행&lt;/li&gt;
  &lt;li&gt;결과 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/codeship_test.png&quot; alt=&quot;코드쉽 테스트&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 스크린 샷처럼 푸쉬를 할 때마다 테스트를 수행하고 아래 스크린 샷처럼 그 결과를 메일이나 힙챗과 같은 수단으로 테스트 성공 여부를 받을 수 있습니다. 그리고 테스트가 성공하면 릴리즈 서버로 배포할 수 있도록 설정할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/test_feedback.png&quot; alt=&quot;테스트 피드백&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-more&quot;&gt;And more?&lt;/h2&gt;
&lt;p&gt;이 밖에도 백엔드에 관하여 공유사항들이 많이 있는데요, 다음 포스팅에서 공유하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>애드투페이퍼 서비스를 같이 혁신할 엔지니어분을 모십니다.</title>
      <link>http://add2paper.github.io/2014/03/27/Add2paper-Recuriting/</link>
      <pubDate>Thu, 27 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/03/27/Add2paper-Recuriting</guid>
      <description>&lt;p&gt;&lt;img src=&quot;http://cdn.add2paper.com/media/image/2013/6/137084747402312.png&quot; style=&quot;width: 100%; margin: 10px 0 10px 0;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애드투페이퍼(&lt;a href=&quot;http://www.add2paper.com&quot;&gt;홈페이지&lt;/a&gt; / &lt;a href=&quot;http://www.add2paper.com/pdf/&quot;&gt;매체소개서&lt;/a&gt;)는 20대 대학생 타겟 미디어입니다. 현재 전국 72개 대학 900여대 제휴 PC를 통해 30만명의 대학생이 애드투페이퍼 서비스를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;2013년 3월에 애드투페이퍼 앱(&lt;a href=&quot;http://www.add2paper.com/m_api/download/ios/&quot;&gt;아이폰&lt;/a&gt; / &lt;a href=&quot;http://www.add2paper.com/m_api/download/android/&quot;&gt;안드로이드&lt;/a&gt;)을 추가로 출시해 매일 모바일 회원의 50%가 앱에 접속하고 있습니다. 또한 아산나눔재단, DSC인베스트먼트 등으로부터 9억 원의 투자를 유치하여 공격적으로 성장하고 있습니다.&lt;/p&gt;

&lt;p&gt;2014년에는 30만 대학생들의 소통 창구 캠퍼스 담벼락을 앱 내에 오픈하는 등 다양하고 멋진 시도들을 준비하고 있습니다. 지금까지 멋지게 성장해온 애드투페이퍼 서비스가 앞으로 또 어떤 모습으로 진화할지 궁금하시다구요?? 그럼 지금 바로 로켓에 올라타세요!! :)&lt;/p&gt;

&lt;p&gt;아래는 애드투페이퍼에서 채용하는 포지션들을 나열한 것입니다. 동시에 여러 업무를 진행하셔도 관계 없고, 도중에 담당 업무를 바꾸셔도 관계 없습니다! 애드투페이퍼는 함께 고민하고, 공부하고, 성장해 나가는 열정적인 분들을 기다립니다. 줄곧 백엔드 개발을 하셨지만 앱 개발을 해보고 싶으시다구요? 애드투페이퍼에서는 가능합니다. 만들고 싶은 서비스를 함께 기획하고, 함께 만들어 나갈 분들을 찾습니다!&lt;/p&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;android-&quot;&gt;Android 개발자&lt;/h3&gt;
&lt;hr /&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
&lt;img src=&quot;http://cdn.add2paper.com/media/image/2014/3/139590972481505.jpg&quot; style=&quot;width: 40%&quot; /&gt;
&amp;nbsp;&amp;nbsp;
&lt;img src=&quot;http://cdn.add2paper.com/media/image/2014/3/139590973056549.jpg&quot; style=&quot;width: 40%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com/m_api/download/android/&quot;&gt;애드투페이퍼 안드로이드앱&lt;/a&gt;은 Native와 Web이 섞인 하이브리드 앱으로 개발되었습니다. 컨텐츠가 빈번하게 바뀌는 부분은 Web 기술을 적용하여 서버에서 기민하게 변경할 수 있도록 설계되었습니다. 애드투페이퍼 안드로이드앱에 가슴 뛰는 놀라운 기능과 서비스를 함께 추가하실 분들을 모십니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;애드투페이퍼 안드로이드앱 개발 / 신규 기능 추가  &lt;/li&gt;
  &lt;li&gt;애드투페이퍼 안드로이드앱 테스트 자동화  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Android 개발 가능자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;번뜩이는 아이디어가 넘치시는 분  &lt;/li&gt;
  &lt;li&gt;적극적으로 Ideation 과정 부터 구체화 및 개발까지 모든 과정을 즐기며 참여하는 분  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios-&quot;&gt;iOS 개발자&lt;/h3&gt;
&lt;hr /&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
&lt;img src=&quot;http://cdn.add2paper.com/media/image/2014/3/139591545156665.jpg&quot; style=&quot;width: 40%&quot; /&gt;
&amp;nbsp;&amp;nbsp;
&lt;img src=&quot;http://cdn.add2paper.com/media/image/2014/3/13959154604921.jpg&quot; style=&quot;width: 40%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com/m_api/download/ios/&quot;&gt;애드투페이퍼 아이폰앱&lt;/a&gt; 또한 Native와 Web이 섞인 하이브리드 앱으로 개발되었습니다. Web 부분은 안드로이드앱과 아이폰앱에서 공유하여 개발 생산성을 극대화 하고 있습니다. 애드투페이퍼 아이폰앱에 가슴 뛰는 놀라운 기능과 서비스를 함께 추가하실 분들을 모십니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;애드투페이퍼 아이폰앱 개발 / 신규 기능 추가  &lt;/li&gt;
  &lt;li&gt;애드투페이퍼 아이폰앱 테스트 자동화  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;iOS 개발 가능자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;번뜩이는 아이디어가 넘치시는 분  &lt;/li&gt;
  &lt;li&gt;적극적으로 Ideation 과정 부터 구체화 및 개발까지 모든 과정을 즐기며 참여하는 분  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;웹 서비스 백엔드 개발자&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;애드투페이퍼의 서비스의 백엔드는 100% Python으로 만들어져 있습니다. 저희 서비스의 구성 Stack은 &lt;a href=&quot;/2013/04/17/Add2paper-Technology-Stack/&quot;&gt;“애드투페이퍼 서비스 구성 Stack”&lt;/a&gt; 포스팅에서 확인하실 수 있습니다. Python으로 혁신적인 서비스를 만들고 싶으신 분들, 더이상 Instagram, Pinterest, Quora 등 Python 엔지니어들의 지상낙원을 부러워하지 않으셔도 됩니다. 애드투페이퍼에서 Python으로 끝내주는 서비스 같이 만들어요!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;애드투페이퍼 서비스 신규 기능 추가 / 신규 서비스 개발  &lt;/li&gt;
  &lt;li&gt;오픈소스 스택으로 자동화된 서비스 구성 및 운용  &lt;/li&gt;
  &lt;li&gt;DevOps (애드투페이퍼에서는 자동화된 배포 시스템을 이용, 누구나 원하는 시간에 언제든지 원클릭으로 배포가 가능합니다.)  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Python 가능자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기본적인 알고리즘에 대한 이해  &lt;/li&gt;
  &lt;li&gt;MySQL 사용 경험  &lt;/li&gt;
  &lt;li&gt;Linux 사용 경험  &lt;/li&gt;
  &lt;li&gt;웹 프레임워크 사용 경험 (Django, Flask, RoR 등)  &lt;/li&gt;
  &lt;li&gt;Mercurial, Git 등 DVCS 사용 경험  &lt;/li&gt;
  &lt;li&gt;Memcached, Redis, Celery, Nginx, Gunicorn, Supervisor 중 1개 이상 사용해본 경험  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;애드투페이퍼 윈도우 클라이언트 개발자&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;전국 72대 대학교 900대 PC에 설치되어 있는 애드투페이퍼 윈도우 클라이언트를 혁신할 엔지니어분을 모십니다. 현재 애드투페이퍼 클라이언트는 애드투페이퍼 회원의 무료프린팅뿐만 아니라 기존 유료프린팅 솔루션까지 대체하는 차세대 프린팅 솔루션으로 입지를 굳히고 있습니다. (애드투페이퍼 클라이언트에서는 무료 / 유료 프린트가 모두 가능합니다.)&lt;/p&gt;

&lt;p&gt;현재까지 애드투페이퍼 클라이언트를 통해 인쇄된 프린팅 장수는 총 1천 703만 3736장입니다(2014년 3월 27일 오후 6시 기준). 요즘은 매일 10만장씩 인쇄되어 2천만장 돌파를 코앞에 두고 있습니다. 애드투페이퍼 클라이언트는 전국 대학생 생활의 한 부분으로 자리 잡아가고 있습니다. 전국 모든 대학교 복사실 PC에 애드투페이퍼 클라이언트가 설치되는 그날까지, 애드투페이퍼 클라이언트의 혁신을 주도할 엔지니어분을 모십니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;애드투페이퍼 클라이언트 사용자 경험 혁신  &lt;/li&gt;
  &lt;li&gt;애드투페이퍼 클라이언트 성능 튜닝  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;C / C++ 가능자  &lt;/li&gt;
  &lt;li&gt;MFC 가능자  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;매일 전국 각지에서 애드투페이퍼 클라이언트를 이용해 인쇄하는 애드투페이퍼 유저분들의 사용자 경험을 밤낮으로 고민하고 개선하는 열정을 가지신 분  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;근무 환경 및 복리 후생&lt;/h2&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;회사 위치 : &lt;a href=&quot;http://map.naver.com/local/siteview.nhn?code=13468464&quot;&gt;서울특별시 서초구 양재동 264-7 신성빌딩 3층&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;건물 한 층을 전부 사용하는 쾌적한 사무실  &lt;/li&gt;
  &lt;li&gt;27형 iMac 제공  &lt;/li&gt;
  &lt;li&gt;연봉제, 4대보험, 퇴직금, 인센티브  &lt;/li&gt;
  &lt;li&gt;점심 식대 지원   &lt;/li&gt;
  &lt;li&gt;원하는 출퇴근 시간, 근무환경 선택 가능  &lt;/li&gt;
  &lt;li&gt;도서 구매비 지원  &lt;/li&gt;
  &lt;li&gt;컨퍼런스 참가비 지원  &lt;/li&gt;
  &lt;li&gt;남자 : 여자 = 2 : 8 의 놀라운(?) 성비  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;지원 방법&lt;/h2&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;수시 채용입니다. 언제든지 연락주세요.  &lt;/li&gt;
  &lt;li&gt;resume, 포트폴리오 (형식 자유) 를 jobs@add2paper.com 으로 보내주시면 됩니다. (개인 블로그, 홈페이지, 또는 Github 계정을 함께 보내주시면 좋습니다.)  &lt;/li&gt;
  &lt;li&gt;이메일 접수 시 24시간 이내에 개별 연락드립니다.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-16&quot;&gt;애드투페이퍼 언론 보도&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[(Fall in App) 무료 프린팅 인기 ‘애드투페이퍼’&lt;/td&gt;
          &lt;td&gt;아이티투데이](http://www.ittoday.co.kr/news/articleView.html?idxno=42209)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[KTV 기획 대한민국의 희망, 창조경제 (12회)&lt;/td&gt;
          &lt;td&gt;KTV](http://www.ktv.go.kr/ktv_contents.jsp?cid=469278)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[(더벨)’쫄지말고 투자하라’, 시즌 1 마지막 방송&lt;/td&gt;
          &lt;td&gt;머니투데이](http://www.mt.co.kr/view/mtview.php?type=1&amp;amp;no=2013062109199663750&amp;amp;outlink=1)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[“앱 잘 활용하면 삶이 스마트해져요”&lt;/td&gt;
          &lt;td&gt;부산일보](http://news20.busan.com/controller/newsController.jsp?newsId=20130720000008)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;[&lt;인터뷰&gt; “단지 공짜 출력? 20대 삶 개선할 것” | 아주경제](http://www.ajunews.com/kor/view.jsp?newsId=20130609000325)&lt;/인터뷰&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[“아이디어만 있으면 창업”&lt;/td&gt;
          &lt;td&gt;OBS](http://www.obsnews.co.kr/news/articleView.html?idxno=716608)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[靑 “창조경제 사례? 골프존·싸이·카카오톡이다”&lt;/td&gt;
          &lt;td&gt;머니투데이](http://www.mt.co.kr/view/mtview.php?type=1&amp;amp;no=2013050316091578345&amp;amp;outlink=1)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;경제매거진&lt;/td&gt;
          &lt;td&gt;MBC&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/jzKCeuPhC0k&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>애드투페이퍼 서비스 구성 Stack</title>
      <link>http://add2paper.github.io/2013/04/17/Add2paper-Technology-Stack/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2013/04/17/Add2paper-Technology-Stack</guid>
      <description>&lt;p&gt;안녕하세요, &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;에서 개발을 담당하고 있는 &lt;a href=&quot;http://www.leekchan.com&quot;&gt;이경찬&lt;/a&gt;입니다. 애드투페이퍼를 개발 및 운영하면서 경험하고 해결한 사항들을 공유하고자 블로그를 만들었습니다. 첫 번째 포스트에서는 애드투페이퍼 서비스 구성 Stack에 대해서 공유하고자 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;서버 구성&lt;/h3&gt;
&lt;p&gt;애드투페이퍼 서비스는 KT Ucloud 인스턴스 7대 위에서 동작하고 있습니다. 각 인스턴스의 역할은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;로드밸런서 1대 (1vCore 1GB&lt;/td&gt;
          &lt;td&gt;Ubuntu 11.04&lt;/td&gt;
          &lt;td&gt;HAProxy)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;어플리케이션 서버 피크 타임 기준 3대 (4vCore 4GB&lt;/td&gt;
          &lt;td&gt;Ubuntu 11.04&lt;/td&gt;
          &lt;td&gt;Gunicorn, Django, Supervisor) - 애드투페이퍼앱은 매일 아침 8시 30분에 수신 거부자를 제외한 전체 회원(약 30만 명)에게 무료 포인트 적립 푸시를 발송합니다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;DB 2대 (4vCore 4GB&lt;/td&gt;
          &lt;td&gt;CentOS 5.4&lt;/td&gt;
          &lt;td&gt;MySQL Master-Slave Replication 구성)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;캐시 + 워커 서버 1대 (4vCore 8GB&lt;/td&gt;
          &lt;td&gt;Ubuntu 11.04&lt;/td&gt;
          &lt;td&gt;Memcached, Celery, Redis, Supervisor)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;현재는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_point_of_failure&quot;&gt;SPOF&lt;/a&gt; 가 많지만, 점진적으로 개선 중입니다. 궁극적으로는 무중단 인프라를 구축하는 것이 목표입니다. 현재 어플리케이션 서버와 DB는 Failover가 되고, HAProxy 이중화 작업을 최우선 과제로 진행 중입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;서비스 구성&lt;/h3&gt;
&lt;p&gt;애드투페이퍼 서비스 구성은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;애드투페이퍼 웹서비스  &lt;/li&gt;
  &lt;li&gt;애드투페이퍼 앱 API 백엔드  &lt;/li&gt;
  &lt;li&gt;프린터 API 백엔드  &lt;/li&gt;
  &lt;li&gt;광고주용 실시간 리포트 사이트  &lt;/li&gt;
  &lt;li&gt;프린터관리자용 실시간 프린팅 및 정산 정보 확인 사이트  &lt;/li&gt;
  &lt;li&gt;내부 관리용 사이트  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-server-&quot;&gt;Application Server 구성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Django&lt;/li&gt;
  &lt;li&gt;Nginx&lt;/li&gt;
  &lt;li&gt;Gunicorn&lt;/li&gt;
  &lt;li&gt;Supervisor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;앞서 언급한 것처럼 애드투페이퍼 서비스 코드는 Python, Django로 작성됩니다. 리버스 프록시로는 Nginx, WSGI Container로는 Gunicorn을 사용하고 있습니다. Supervisor는 Gunicorn 프로세스 모니터링 용으로 사용 중입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cache-&quot;&gt;Cache 구성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Memcached&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pythonhosted.org/johnny-cache/&quot;&gt;Johnny Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;애드투페이퍼 서비스에서는 모든 Database Read Query를 Memcached에 캐시하고 있습니다. 모든 상황에 대해 견고한 Cache Invalidation 로직을 만드는 작업은 매우 많은 시간이 소요되는 작업이므로, Johnny Cache라는 Cache Framework를 사용하고 있습니다. Johnny Cache는 기본적으로 MySQL의 Query Cache와 비슷하게 동작합니다. Johnny Cache Middleware를 등록해 놓으면 Monkey Patch를 통해 SELECT 쿼리가 발생할 때는 쿼리를 Key로 Memcached에 캐시하고, INSERT 또는 UPDATE 쿼리가 발생할 때는 해당 Table에 관계된 Cache들을 자동으로 Invalidation 해줍니다.&lt;/p&gt;

&lt;p&gt;백엔드 코드를 작성할 때는 Memcached의 Cache hit ratio를 높이기 위해 SELECT 문의 WHERE절에는 특정한 상수가 들어가는 것을 피하고 있습니다. 또한 어플리케이션상에서 데이터를 가공할 수 있을 때에는 최대한 어플리케이션에서 코드상에서 처리해서 I/O Bound 되는 것을 피하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;database--storage&quot;&gt;Database / Storage&lt;/h2&gt;
&lt;p&gt;데이터베이스는 MySQL 5.5 를 사용하고 있고, Master-Slave 구성으로 2대를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;서비스상에서 업로드 되는 이미지 및 파일은 Amazon S3 (Tokyo Region)에 저장하고 Tcloud CDN을 붙여서 사용하고 있습니다. 광고 이미지를 리사이징 하는 등의 작업은 어플리케이션 서버에서 인메모리로 처리하고 S3에 저장합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;worker-&quot;&gt;Worker 구성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Redis&lt;/li&gt;
  &lt;li&gt;Celery&lt;/li&gt;
  &lt;li&gt;Supervisor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;시간이 걸리는 Task들은 모두 Task Queue를 이용해 비동기로 처리하고 있습니다. Task Queue는 Celery를 이용하고 있고 작업들을 저장하고 분배하는 Broker 용도로 Redis를 사용하고 있습니다. 그리고 Celery 프로세스의 모니터링 용도로 Supervisor를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;어플리케이션 배포는 &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt;을 이용해 자동화하고 있습니다. 배포 시 각 서버에서 실행하는 커맨드는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;어플리케이션 서버&lt;/h3&gt;

&lt;pre&gt;
[Git 저장소에서 최신 코드 다운로드]
pip install -r ./requirements.txt
supervisorctl status gunicorn | sed &quot;s/.*[pid ]\([0-9]\+\)\,.*/\1/&quot; | xargs kill -HUP
&lt;/pre&gt;
&lt;p&gt;저장소에서 최신 코드를 받아온 뒤, 새로 추가된 모듈들을 설치한 후 Gunicorn에 -HUP signal을 보내서 graceful reload 기능(처리 중인 요청을 모두 처리하고 프로세스를 재시작함)을 실행시킵니다. supervisorctl reload 커맨드로 Gunicorn을 재시작하면 재시작하는 도중에는 요청을 받을 수 없는 상태가 되므로, pid를 읽어와서 -HUP 시그널을 보내는 방식으로 재시작시켜서 무중단으로 코드를 변경하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;캐시 + 워커 서버&lt;/h3&gt;

&lt;pre&gt;
[Git 저장소에서 최신 코드 다운로드]
pip install -r ./requirements.txt
python ./manage.py migrate
supervisorctl reload
&lt;/pre&gt;

&lt;p&gt;캐시 + 워커 서버에서는 &lt;a href=&quot;http://south.aeracode.org/&quot;&gt;South&lt;/a&gt;의 migrate 커맨드를 실행시켜서 데이터베이스를 마이그레이션하는 작업을 담당하고 있습니다. 모든 작업이 끝난 후에는 supervisorctl reload 명령을 실행시켜서 Celery 프로세스를 재시작 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;server-monitoring&quot;&gt;Server Monitoring&lt;/h2&gt;
&lt;p&gt;서버 모니터링은 &lt;a href=&quot;http://www.datadoghq.com/&quot;&gt;datadog&lt;/a&gt; 서비스를 이용해서 하고 있습니다. 실시간 모니터링이 가능하고 대시보드를 만들어 각 서버의 CPU, Memory, Network 사용량 등을 원하는 대로 가공해서 모아서 볼 수 있어서 효과적입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-more&quot;&gt;And more?&lt;/h2&gt;
&lt;p&gt;지금까지 저희 서비스 구성 Stack에 대해 공유 드렸는데요, 애드투페이퍼 앱에도 흥미로운 공유사항들이 많이 있습니다. 살짝 공유하자면 저희 앱은 HTML, Javascript로 제작되어서 단일 코드 베이스로 iOS / Android 플랫폼 양쪽에 배포하고 있는데요, 후속 포스팅에서 자세히 공유하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
</description>
    </item>
    
    

  </channel> 
</rss>