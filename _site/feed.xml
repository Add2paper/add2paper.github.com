<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://add2paper.github.io</link>
    <atom:link href="http://add2paper.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Mon, 01 Dec 2014 09:46:03 +0000</pubDate>
    <lastBuildDate>Mon, 01 Dec 2014 09:46:03 +0000</lastBuildDate>

    
    
    <item>
      <title>More Python 1 - Copy</title>
      <link>http://add2paper.github.io/2014/12/01/More-Python-1-Copy/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/12/01/More-Python-1-Copy</guid>
      <description>&lt;p&gt;안녕하세요, &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;에서 백엔드를 개발하고 있는 &lt;a href=&quot;http://www.parkayun.kr&quot;&gt;박아윤&lt;/a&gt;입니다.&lt;br /&gt; 이번 포스트부터 Python의 멀고도 가까운 내용을 소개하는 More Python을 연재코자 합니다. &lt;br /&gt; 그 첫 번째 포스트로 Python의 Copy 관련 내용을 풀어보겠습니다!&lt;/p&gt;

&lt;h2 id=&quot;copy&quot;&gt;Copy&lt;/h2&gt;

&lt;p&gt;이 포스트에서 말하고자 하는 Copy는 변수를 복사하는 그 Copy입니다. &lt;br /&gt;예를 들어 아래와 같이 apple 변수 값을 banana 변수에 그대로 대입하는 경우입니다.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;language-python&#39; data-lang=&#39;python&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;apple&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;banana&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;apple&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그럼 그냥 쓰면 되지 문제가 뭐길래 포스팅까지 하느냐? 하면 바로 아래와 같은 경우입니다.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;language-python&#39; data-lang=&#39;python&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;9&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;foo를 초기화하고 bar에 값을 대입하고 foo의 값을 바꿨더니 bar의 값도 따라 바뀌었습니다.&lt;br /&gt; 아래에서 확인할 수 있듯이 값을 대입하면 값에 대한 메모리가 더 할당되는 것이 아닌 기존 값의 메모리 주소를 공유하기 때문에 발생하게 됩니다. 리스트 같은 경우 리스트 자체뿐만 아니라 리스트 내 요소들도 똑같은 주소를 공유합니다. 이러한 Copy를 &lt;strong&gt;Shallow Copy(얕은 복사)&lt;/strong&gt;라고 합니다.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;language-python&#39; data-lang=&#39;python&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;bp&#39;&gt;True&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
&lt;span class=&#39;bp&#39;&gt;True&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;777&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
&lt;span class=&#39;bp&#39;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그럼 이러한 현상을 피하기 위해서는 무엇이 필요할까요? 얕은 복사의 반의어인 &lt;strong&gt;Deep Copy(깊은 복사)&lt;/strong&gt;를 이용하면 됩니다. Python에서는 기본적으로 copy 모듈을 제공하고 있어 아래와 같이 사용하면 됩니다.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;language-python&#39; data-lang=&#39;python&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;copy&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;copy&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;deepcopy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;123&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;bp&#39;&gt;False&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;123&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 Deep Copy를 하더라도 리스트 내 요소들은 여전히 똑같은 값을 공유하고 있습니다. 그러나 얕은 복사와는 다르게 리스트 자체는 다른 값이기 때문에 원본 리스트의 요소가 바뀌었다고 복사된 리스트의 요소에 영향을 끼치지는 않습니다.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;language-python&#39; data-lang=&#39;python&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;copy&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;copy&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;deepcopy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
&lt;span class=&#39;bp&#39;&gt;True&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;777&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
&lt;span class=&#39;bp&#39;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy 모듈을 쓰지 않고 아래와 같은 방법으로도 Deep Copy와 비슷한 효과를 얻을 수 있습니다. 그러나 여기서 주의할 점은 효과만 비슷할 뿐 Deep Copy가 아닌 Shallow Copy입니다.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;language-python&#39; data-lang=&#39;python&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[:]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;좀 더 구체적으로 사용해보면 바로 Shallow Copy인 이유를 바로 알 수 있습니다.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;language-python&#39; data-lang=&#39;python&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[:]&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;append&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;foo&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bar&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]]&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;and_more&quot;&gt;And more?&lt;/h2&gt;

&lt;p&gt;기본적으로 리스트형뿐만 아니라 모든 변수형에 적용되는 사항이나 문자열은 값을 변경하려면 새로 대입해야 하고 튜플은 값을 변경하는 것이 목적도 아니고 바뀌지도 않으니 실질적으로 사용할 수 있는 건 리스트와 사전형입니다. 특히 사전형보다는 리스트를 다룰 때 자주 사용될 수 있으니 실제 코딩하실 때 참고하시면 도움되실듯합니다.&lt;/p&gt;

&lt;p&gt;다른 흥미로운 주제를 가지고 다시 찾아뵙도록 하겠습니다. :D&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>애드투페이퍼 서비스를 같이 혁신할 엔지니어분을 모십니다. (산업기능요원 보충역 / 전직 가능)</title>
      <link>http://add2paper.github.io/2014/11/25/Add2paper-Recruiting2/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/11/25/Add2paper-Recruiting2</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;는 20대 대학생 타겟 미디어입니다. 2014년 하반기에는 통합 가상 화폐 ‘애딧’과 API 서비스를 오픈하여 다양한 대학생 편의 서비스와 빠른 속도로 제휴를 진행하고 있습니다. 대학생 타겟 미디어를 넘어 대학생 통합 편의 서비스로 진화하고 있는 애드투페이퍼에서 실력 있는 개발자분들을 모십니다. &lt;b&gt;&lt;u&gt;애드투페이퍼가 이번에 병역특례회사로 선정되어 산업기능요원(보충역 / 전직) 또한 가능합니다.&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;____&quot;&gt;&amp;lt; 웹서비스 백엔드 개발자 &amp;gt;&lt;/h2&gt;

&lt;p&gt;애드투페이퍼의 서비스의 백엔드는 100% Python으로 만들어져 있습니다. 저희 서비스의 구성 Stack은 &lt;a href=&quot;http://add2paper.github.io/2013/04/17/Add2paper-Technology-Stack/&quot;&gt;“애드투페이퍼 서비스 구성 Stack”&lt;/a&gt; 포스팅에서 확인하실 수 있습니다. 최근에는 API 관련 일부 서비스에 &lt;a href=&quot;http://www.tornadoweb.org/&quot;&gt;Tornado&lt;/a&gt;를 실험적으로 도입하고 있고, 저비용+고성능+고가용성 서버를 만드는 데 관심이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;&quot;&gt;담당업무&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;애드투페이퍼 서비스 신규 기능 추가 / 신규 서비스 개발&lt;/li&gt;

&lt;li&gt;애드투페이퍼 API 서비스 개발&lt;/li&gt;

&lt;li&gt;DevOps (자동화된 배포 시스템을 이용, 누구나 원하는 시간에 언제든지 원클릭으로 배포가 가능합니다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;____vpd__&quot;&gt;&amp;lt; 윈도우 클라이언트 / VPD 개발자 &amp;gt;&lt;/h2&gt;

&lt;p&gt;애드투페이퍼 윈도우 클라이언트, VPD(Virtual Printer Driver)는 애드투페이퍼 서비스의 핵심입니다. 현재까지 애드투페이퍼클라이언트를 통해 35만 명의 회원이 2500만 장 이상의 출력을 하였습니다. VPD를 통해 기존 프린터 인쇄 방식을 그대로 사용하여 직관적으로 서비스를 사용할 수 있습니다. (또한 프린터 모델과 관계없이 모든 프린터와 호환됩니다.)&lt;/p&gt;
&lt;div style=&#39;text-align: center;&#39;&gt;
&lt;img src=&#39;http://cdn.add2paper.com/media/image/2014/11/141688833323987.jpg&#39; style=&#39;width: 600px&#39; /&gt;
&lt;br /&gt;
(일반 프린터 인쇄와 같이 Add2Paper Printer를 선택하고 인쇄를 하면 VPD에서 전처리 후 윈도우 클라이언트를 실행합니다.)
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&#39;http://cdn.add2paper.com/media/image/2014/11/141688832599639.jpg&#39; style=&#39;width: 600px&#39; /&gt;
&lt;br /&gt;
(애드투페이퍼 계정으로 로그인 후 &#39;인쇄하기&#39;를 누르면 실제 프린터에서 출력물이 나옵니다.)
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3년간의 축적된 기술을 바탕으로 더 나은 클라이언트와 VPD를 만들기 위해 노력하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;_2&quot;&gt;담당업무&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;애드투페이퍼 윈도우 클라이언트 개발 (C# / .Net Framework)&lt;/li&gt;

&lt;li&gt;VPD 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;_3&quot;&gt;특이사항&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;드라이버 관련 개발 지식은 필수는 아닙니다. 다만 윈도우 개발과 관련한 탄탄한 기본기는 필수입니다.&lt;/li&gt;

&lt;li&gt;현재 윈도우 클라이언트의 UI는 내장된 Chrome (&lt;a href=&quot;https://code.google.com/p/chromiumembedded/&quot;&gt;CEF&lt;/a&gt;) 위에서 동작하는 HTML5 웹앱입니다. 웹 관련 기술에 관심이 있으시면 좋지만 필수는 아닙니다. (UI는 웹개발자들이 담당하고 있습니다. UI 개발은 신경 쓰지 않으셔도 되니 걱정하지 마세요.)&lt;/li&gt;

&lt;li&gt;현재 기술스택은 언제든지 유연하게 변경이 가능합니다. 내가 만들면 이것보다는 훨씬 잘 만들 수 있겠다는 분들 환영합니다!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_android__&quot;&gt;&amp;lt; Android 개발자 &amp;gt;&lt;/h2&gt;

&lt;p&gt;리뷰 평점 4.8! &lt;a href=&quot;http://www.add2paper.com/m_api/download/android/&quot;&gt;애드투페이퍼 안드로이드앱&lt;/a&gt; 및 신규 앱 개발을 담당할 Android 개발자를 찾습니다. 애드투페이퍼 개발팀은 웹덕후라 Adnroid 앱에도 웹기술이 꽤 많이 쓰이고 있지만, 마음에 안 들면 토론 후 걷어낼 수 있습니다. 더 바람직한 개발 방향을 제시해 주실 분들 언제든지 환영합니다.&lt;/p&gt;

&lt;h3 id=&quot;_4&quot;&gt;담당업무&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;애드투페이퍼 안드로이드앱 개발 / 신규 기능 추가&lt;/li&gt;

&lt;li&gt;애드투페이퍼 안드로이드앱 테스트 자동화&lt;/li&gt;

&lt;li&gt;신규 앱 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_ios__&quot;&gt;&amp;lt; iOS 개발자 &amp;gt;&lt;/h2&gt;

&lt;p&gt;리뷰 별 다섯개! &lt;a href=&quot;http://www.add2paper.com/m_api/download/ios/&quot;&gt;애드투페이퍼 아이폰앱&lt;/a&gt; 및 신규 앱 개발을 담당할 iOS 개발자를 찾습니다. 아이폰앱 역시 웹기술이 많이 스며들어있습니다. Android앱과 상당 부분 코드를 공유하고 있고, 높은 생산성과 유연한 수정을 지향하고 있습니다. 마음에 안 드시면 역시 토론후 수정이 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;_5&quot;&gt;담당업무&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;애드투페이퍼 아이폰앱 개발 / 신규 기능 추가&lt;/li&gt;

&lt;li&gt;애드투페이퍼 아이폰앱 테스트 자동화&lt;/li&gt;

&lt;li&gt;신규 앱 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_&quot;&gt;개발 문화&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Github, Github Issues, Hipchat을 사용한 가볍고 탄력성 있는 개발 문화를 지향합니다. 최근에 작성된 코드들은 테스트 코드를 작성하고 CI를 통해 자동으로 코드를 검증합니다.&lt;/li&gt;

&lt;li&gt;새로운 기술을 적극적으로 검토하고 실험합니다. 기술 스택도 마음대로 선택 가능합니다. 다만 충분한 테스트 코드 작성 및 검토가 선행됩니다.&lt;/li&gt;

&lt;li&gt;하기 싫은 일을 강요하는 사람은 없습니다. 모든 개발 방향은 토론을 통해 결정합니다.&lt;/li&gt;

&lt;li&gt;낮에 똑똑하게 열심히 일하고 야근은 절대로 하지 않습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_6&quot;&gt;복리후생&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;회사 위치 : &lt;a href=&quot;http://map.naver.com/local/siteview.nhn?code=13468464&quot;&gt;서울특별시 강남구 역삼동 799-5, 대일빌딩 3층&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;건물 한 층을 전부 사용하는 쾌적한 사무실&lt;/li&gt;

&lt;li&gt;개발에 필요한 모든 장비 지원(iMac, 맥북 등)&lt;/li&gt;

&lt;li&gt;연봉제, 4대보험, 퇴직금, 인센티브&lt;/li&gt;

&lt;li&gt;점심 식대 지원&lt;/li&gt;

&lt;li&gt;원하는 출퇴근 시간, 근무환경 선택 가능&lt;/li&gt;

&lt;li&gt;도서 구매비 지원&lt;/li&gt;

&lt;li&gt;컨퍼런스 참가비 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_7&quot;&gt;지원방법&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;수시 채용입니다. 언제든지 연락주세요.&lt;/li&gt;

&lt;li&gt;resume, 포트폴리오 (형식 자유) 를 jobs@add2paper.com 으로 보내주시면 됩니다. (개인 블로그, 홈페이지, 또는 Github 계정을 함께 보내주시면 좋습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_8&quot;&gt;언론보도&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://search.daum.net/search?w=news&amp;cluster=n&amp;q=%EC%95%A0%EB%93%9C%ED%88%AC%ED%8E%98%EC%9D%B4%ED%8D%BC&amp;sort=1&quot;&gt;‘애드투페이퍼’ 최신 기사 검색&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    
    
    <item>
      <title>테스트와 CI</title>
      <link>http://add2paper.github.io/2014/08/06/Test-And-CI/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/08/06/Test-And-CI</guid>
      <description>&lt;p&gt;안녕하세요, &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;에서 백엔드 개발을 맡은 &lt;a href=&quot;http://www.parkayun.kr&quot;&gt;박아윤&lt;/a&gt;입니다. 이번 블로그 개편에 맞춰 저희가 하고 있는 백엔드 테스트, 장고 테스트에 대하여 공유하고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;현재 애드투페이퍼 백엔드는 API와 웹 서비스로 구성되어있습니다. 이 중에서 API 서비스 테스트에 관하여 소개하고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test?&lt;/h2&gt;

&lt;p&gt;테스트는 흔히 통상적인 개념으로 무엇인가를 검사하는 행위를 지칭합니다.&lt;br /&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;소프트웨어 테스트&lt;/a&gt;도 이와 마찬가지로 소프트웨어가 올바르게 의도한 대로 작동하는가를 검사하는 것 이라고 할 수 있습니다. 이러한 소프트웨어 테스트는 버그 발견뿐만 아니라 테스트와 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81&quot;&gt;리팩토링&lt;/a&gt; 과정을 통해서 코드 품질 향상에도 좋은 영향을 이끌어옵니다.&lt;br /&gt;이런 연유와 유사하게 소프트웨어 개발 기법으로 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%A3%BC%EB%8F%84_%EA%B0%9C%EB%B0%9C&quot;&gt;테스트 주도 개발&lt;/a&gt;이라는 기법도 탄생하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;django_test&quot;&gt;Django Test&lt;/h2&gt;

&lt;p&gt;장고 프레임워크에서는 기본적으로 &lt;a href=&quot;https://docs.djangoproject.com/en/1.7/topics/testing/overview/&quot;&gt;장고 테스트 모듈&lt;/a&gt;을 제공합니다.&lt;br /&gt;장고 테스트 모듈에는 &lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot;&gt;파이썬 유닛 테스트&lt;/a&gt;와 유사하나 가장 큰 이점은 자동으로 테스트 데이터베이스를 생성해주고 끝나면 삭제까지 해줍니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse


def HelloView(request):
    return HttpResponse(&amp;#39;Hello World&amp;#39;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 HelloView의 기본적인 테스트 조건은 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Response를 제대로 해주는가&lt;/li&gt;

&lt;li&gt;의도한 결괏값인가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 조건대로 장고 테스트 모듈을 이용하여 테스트 코드를 작성해 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.test import TestCase


class HelloTestCase(TestCase):
    #테스트전 초기화하는 함수입니다.
    def setUp(self):
        self.baseURL = &amp;#39;/&amp;#39;
        
    def test_hello(self):
        url = self.baseURL + &amp;#39;hello/&amp;#39;
        
        #성공 테스트
        res = self.client.get(url)
        self.assertEqual(res.status_code, 200)
        self.assertEqual(res.content, &amp;#39;Hello&amp;#39;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드와 같은 형태로 테스트 코드를 작성할 수 있습니다. 이때 유의할 점은 test_hello와 같이 테스트 함수는 함수명 앞에 test_와 같이 네이밍을 해줘야 합니다. 또한, 이 코드는 간단한 예시이지만 실제로 코드를 작성할 때는 성공하는 테스트뿐만 아니라 실패하는 테스트 코드도 작성해줘야 합니다. 예를 들어 뷰에서 post 요청만을 받는다면 get으로 요청 시에 정상적으로 거절하는지, 실패하는지에 대해서도 테스트를 해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;ci&quot;&gt;CI&lt;/h2&gt;

&lt;p&gt;프로젝트 규모가 커지면 빌드와 테스트하는 데에 많은 자원적, 시간적 비용이 들게 됩니다. 이런 문제점을 해결하기 위해 한 시스템에서 빌드와 테스트를 수행하는데 이를 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81%EC%9D%B8_%ED%86%B5%ED%95%A9&quot;&gt;CI(Continuous Integration)&lt;/a&gt; 시스템이라고 합니다.&lt;br /&gt;현재 애드투페이퍼에서는 &lt;a href=&quot;https://codeship.io&quot;&gt;codeship.io&lt;/a&gt;이라는 서비스에 소스 코드 저장소의 훅을 걸어 사용하고 있습니다. 코드를 수정하고 저장소에 푸쉬를 하게 되면 아래와 같은 흐름대로 코드 테스트를 진행합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;환경변수 설정&lt;/li&gt;

&lt;li&gt;저장소 클론&lt;/li&gt;

&lt;li&gt;저장소 업데이트&lt;/li&gt;

&lt;li&gt;코드 폴더로 이동&lt;/li&gt;

&lt;li&gt;의존성 캐쉬 설정&lt;/li&gt;

&lt;li&gt;가상 머신 설정&lt;/li&gt;

&lt;li&gt;의존성 설치&lt;/li&gt;

&lt;li&gt;데이터베이스 싱크&lt;/li&gt;

&lt;li&gt;테스트 수행&lt;/li&gt;

&lt;li&gt;결과 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/codeship_test.png&quot; alt=&quot;코드쉽 테스트&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 스크린 샷처럼 푸쉬를 할 때마다 테스트를 수행하고 아래 스크린 샷처럼 그 결과를 메일이나 힙챗과 같은 수단으로 테스트 성공 여부를 받을 수 있습니다. 그리고 테스트가 성공하면 릴리즈 서버로 배포할 수 있도록 설정할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/test_feedback.png&quot; alt=&quot;테스트 피드백&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and_more&quot;&gt;And more?&lt;/h2&gt;

&lt;p&gt;이 밖에도 백엔드에 관하여 공유사항들이 많이 있는데요, 다음 포스팅에서 공유하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>애드투페이퍼 서비스를 같이 혁신할 엔지니어분을 모십니다.</title>
      <link>http://add2paper.github.io/2014/03/27/Add2paper-Recuriting/</link>
      <pubDate>Thu, 27 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2014/03/27/Add2paper-Recuriting</guid>
      <description>&lt;p&gt;&lt;img src=&#39;http://cdn.add2paper.com/media/image/2013/6/137084747402312.png&#39; style=&#39;width: 100%; margin: 10px 0 10px 0;&#39; /&gt;&lt;/p&gt;

&lt;p&gt;애드투페이퍼(&lt;a href=&quot;http://www.add2paper.com&quot;&gt;홈페이지&lt;/a&gt; / &lt;a href=&quot;http://www.add2paper.com/pdf/&quot;&gt;매체소개서&lt;/a&gt;)는 20대 대학생 타겟 미디어입니다. 현재 전국 72개 대학 900여대 제휴 PC를 통해 30만명의 대학생이 애드투페이퍼 서비스를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;2013년 3월에 애드투페이퍼 앱(&lt;a href=&quot;http://www.add2paper.com/m_api/download/ios/&quot;&gt;아이폰&lt;/a&gt; / &lt;a href=&quot;http://www.add2paper.com/m_api/download/android/&quot;&gt;안드로이드&lt;/a&gt;)을 추가로 출시해 매일 모바일 회원의 50%가 앱에 접속하고 있습니다. 또한 아산나눔재단, DSC인베스트먼트 등으로부터 9억 원의 투자를 유치하여 공격적으로 성장하고 있습니다.&lt;/p&gt;

&lt;p&gt;2014년에는 30만 대학생들의 소통 창구 캠퍼스 담벼락을 앱 내에 오픈하는 등 다양하고 멋진 시도들을 준비하고 있습니다. 지금까지 멋지게 성장해온 애드투페이퍼 서비스가 앞으로 또 어떤 모습으로 진화할지 궁금하시다구요?? 그럼 지금 바로 로켓에 올라타세요!! :)&lt;/p&gt;

&lt;p&gt;아래는 애드투페이퍼에서 채용하는 포지션들을 나열한 것입니다. 동시에 여러 업무를 진행하셔도 관계 없고, 도중에 담당 업무를 바꾸셔도 관계 없습니다! 애드투페이퍼는 함께 고민하고, 공부하고, 성장해 나가는 열정적인 분들을 기다립니다. 줄곧 백엔드 개발을 하셨지만 앱 개발을 해보고 싶으시다구요? 애드투페이퍼에서는 가능합니다. 만들고 싶은 서비스를 함께 기획하고, 함께 만들어 나갈 분들을 찾습니다!&lt;/p&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;android_&quot;&gt;Android 개발자&lt;/h3&gt;
&lt;hr /&gt;&lt;p style=&#39;text-align: center&#39;&gt;
&lt;img src=&#39;http://cdn.add2paper.com/media/image/2014/3/139590972481505.jpg&#39; style=&#39;width: 40%&#39; /&gt;
&amp;nbsp;&amp;nbsp;
&lt;img src=&#39;http://cdn.add2paper.com/media/image/2014/3/139590973056549.jpg&#39; style=&#39;width: 40%&#39; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com/m_api/download/android/&quot;&gt;애드투페이퍼 안드로이드앱&lt;/a&gt;은 Native와 Web이 섞인 하이브리드 앱으로 개발되었습니다. 컨텐츠가 빈번하게 바뀌는 부분은 Web 기술을 적용하여 서버에서 기민하게 변경할 수 있도록 설계되었습니다. 애드투페이퍼 안드로이드앱에 가슴 뛰는 놀라운 기능과 서비스를 함께 추가하실 분들을 모십니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;애드투페이퍼 안드로이드앱 개발 / 신규 기능 추가  &lt;/li&gt;

&lt;li&gt;애드투페이퍼 안드로이드앱 테스트 자동화  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_2&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Android 개발 가능자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_3&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;번뜩이는 아이디어가 넘치시는 분  &lt;/li&gt;

&lt;li&gt;적극적으로 Ideation 과정 부터 구체화 및 개발까지 모든 과정을 즐기며 참여하는 분  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios_&quot;&gt;iOS 개발자&lt;/h3&gt;
&lt;hr /&gt;&lt;p style=&#39;text-align: center&#39;&gt;
&lt;img src=&#39;http://cdn.add2paper.com/media/image/2014/3/139591545156665.jpg&#39; style=&#39;width: 40%&#39; /&gt;
&amp;nbsp;&amp;nbsp;
&lt;img src=&#39;http://cdn.add2paper.com/media/image/2014/3/13959154604921.jpg&#39; style=&#39;width: 40%&#39; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.add2paper.com/m_api/download/ios/&quot;&gt;애드투페이퍼 아이폰앱&lt;/a&gt; 또한 Native와 Web이 섞인 하이브리드 앱으로 개발되었습니다. Web 부분은 안드로이드앱과 아이폰앱에서 공유하여 개발 생산성을 극대화 하고 있습니다. 애드투페이퍼 아이폰앱에 가슴 뛰는 놀라운 기능과 서비스를 함께 추가하실 분들을 모십니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_4&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;애드투페이퍼 아이폰앱 개발 / 신규 기능 추가  &lt;/li&gt;

&lt;li&gt;애드투페이퍼 아이폰앱 테스트 자동화  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_5&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iOS 개발 가능자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_6&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;번뜩이는 아이디어가 넘치시는 분  &lt;/li&gt;

&lt;li&gt;적극적으로 Ideation 과정 부터 구체화 및 개발까지 모든 과정을 즐기며 참여하는 분  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;___&quot;&gt;웹 서비스 백엔드 개발자&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;애드투페이퍼의 서비스의 백엔드는 100% Python으로 만들어져 있습니다. 저희 서비스의 구성 Stack은 &lt;a href=&quot;/2013/04/17/Add2paper-Technology-Stack/&quot;&gt;“애드투페이퍼 서비스 구성 Stack”&lt;/a&gt; 포스팅에서 확인하실 수 있습니다. Python으로 혁신적인 서비스를 만들고 싶으신 분들, 더이상 Instagram, Pinterest, Quora 등 Python 엔지니어들의 지상낙원을 부러워하지 않으셔도 됩니다. 애드투페이퍼에서 Python으로 끝내주는 서비스 같이 만들어요!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_7&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;애드투페이퍼 서비스 신규 기능 추가 / 신규 서비스 개발  &lt;/li&gt;

&lt;li&gt;오픈소스 스택으로 자동화된 서비스 구성 및 운용  &lt;/li&gt;

&lt;li&gt;DevOps (애드투페이퍼에서는 자동화된 배포 시스템을 이용, 누구나 원하는 시간에 언제든지 원클릭으로 배포가 가능합니다.)  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_8&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python 가능자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_9&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;기본적인 알고리즘에 대한 이해  &lt;/li&gt;

&lt;li&gt;MySQL 사용 경험  &lt;/li&gt;

&lt;li&gt;Linux 사용 경험  &lt;/li&gt;

&lt;li&gt;웹 프레임워크 사용 경험 (Django, Flask, RoR 등)  &lt;/li&gt;

&lt;li&gt;Mercurial, Git 등 DVCS 사용 경험  &lt;/li&gt;

&lt;li&gt;Memcached, Redis, Celery, Nginx, Gunicorn, Supervisor 중 1개 이상 사용해본 경험  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;____2&quot;&gt;애드투페이퍼 윈도우 클라이언트 개발자&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;전국 72대 대학교 900대 PC에 설치되어 있는 애드투페이퍼 윈도우 클라이언트를 혁신할 엔지니어분을 모십니다. 현재 애드투페이퍼 클라이언트는 애드투페이퍼 회원의 무료프린팅뿐만 아니라 기존 유료프린팅 솔루션까지 대체하는 차세대 프린팅 솔루션으로 입지를 굳히고 있습니다. (애드투페이퍼 클라이언트에서는 무료 / 유료 프린트가 모두 가능합니다.)&lt;/p&gt;

&lt;p&gt;현재까지 애드투페이퍼 클라이언트를 통해 인쇄된 프린팅 장수는 총 1천 703만 3736장입니다(2014년 3월 27일 오후 6시 기준). 요즘은 매일 10만장씩 인쇄되어 2천만장 돌파를 코앞에 두고 있습니다. 애드투페이퍼 클라이언트는 전국 대학생 생활의 한 부분으로 자리 잡아가고 있습니다. 전국 모든 대학교 복사실 PC에 애드투페이퍼 클라이언트가 설치되는 그날까지, 애드투페이퍼 클라이언트의 혁신을 주도할 엔지니어분을 모십니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_10&quot;&gt;담당업무&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;애드투페이퍼 클라이언트 사용자 경험 혁신  &lt;/li&gt;

&lt;li&gt;애드투페이퍼 클라이언트 성능 튜닝  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_11&quot;&gt;지원자격&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;C / C++ 가능자  &lt;/li&gt;

&lt;li&gt;MFC 가능자  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_12&quot;&gt;우대사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;매일 전국 각지에서 애드투페이퍼 클라이언트를 이용해 인쇄하는 애드투페이퍼 유저분들의 사용자 경험을 밤낮으로 고민하고 개선하는 열정을 가지신 분  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;____&quot;&gt;근무 환경 및 복리 후생&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;회사 위치 : &lt;a href=&quot;http://map.naver.com/local/siteview.nhn?code=13468464&quot;&gt;서울특별시 서초구 양재동 264-7 신성빌딩 3층&lt;/a&gt;  &lt;/li&gt;

&lt;li&gt;건물 한 층을 전부 사용하는 쾌적한 사무실  &lt;/li&gt;

&lt;li&gt;27형 iMac 제공  &lt;/li&gt;

&lt;li&gt;연봉제, 4대보험, 퇴직금, 인센티브  &lt;/li&gt;

&lt;li&gt;점심 식대 지원  &lt;/li&gt;

&lt;li&gt;원하는 출퇴근 시간, 근무환경 선택 가능  &lt;/li&gt;

&lt;li&gt;도서 구매비 지원  &lt;/li&gt;

&lt;li&gt;컨퍼런스 참가비 지원  &lt;/li&gt;

&lt;li&gt;남자 : 여자 = 2 : 8 의 놀라운(?) 성비  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_&quot;&gt;지원 방법&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;수시 채용입니다. 언제든지 연락주세요.  &lt;/li&gt;

&lt;li&gt;resume, 포트폴리오 (형식 자유) 를 jobs@add2paper.com 으로 보내주시면 됩니다. (개인 블로그, 홈페이지, 또는 Github 계정을 함께 보내주시면 좋습니다.)  &lt;/li&gt;

&lt;li&gt;이메일 접수 시 24시간 이내에 개별 연락드립니다.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;__&quot;&gt;애드투페이퍼 언론 보도&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ittoday.co.kr/news/articleView.html?idxno=42209&quot;&gt;(Fall in App) 무료 프린팅 인기 ‘애드투페이퍼’ | 아이티투데이&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.ktv.go.kr/ktv_contents.jsp?cid=469278&quot;&gt;KTV 기획 대한민국의 희망, 창조경제 (12회) | KTV&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.mt.co.kr/view/mtview.php?type=1&amp;no=2013062109199663750&amp;outlink=1&quot;&gt;(더벨)’쫄지말고 투자하라’, 시즌 1 마지막 방송 | 머니투데이&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://news20.busan.com/controller/newsController.jsp?newsId=20130720000008&quot;&gt;“앱 잘 활용하면 삶이 스마트해져요” | 부산일보&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.ajunews.com/kor/view.jsp?newsId=20130609000325&quot;&gt;&amp;lt;인터뷰&amp;gt; “단지 공짜 출력? 20대 삶 개선할 것” | 아주경제&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.obsnews.co.kr/news/articleView.html?idxno=716608&quot;&gt;“아이디어만 있으면 창업” | OBS&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.mt.co.kr/view/mtview.php?type=1&amp;no=2013050316091578345&amp;outlink=1&quot;&gt;靑 “창조경제 사례? 골프존·싸이·카카오톡이다” | 머니투데이&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;경제매거진 | MBC&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#39;0&#39; height=&#39;315&#39; src=&#39;//www.youtube.com/embed/jzKCeuPhC0k&#39; width=&#39;560&#39;&gt; &lt;/iframe&gt;
&lt;p&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>애드투페이퍼 서비스 구성 Stack</title>
      <link>http://add2paper.github.io/2013/04/17/Add2paper-Technology-Stack/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://add2paper.github.io/2013/04/17/Add2paper-Technology-Stack</guid>
      <description>&lt;p&gt;안녕하세요, &lt;a href=&quot;http://www.add2paper.com&quot;&gt;애드투페이퍼&lt;/a&gt;에서 개발을 담당하고 있는 &lt;a href=&quot;http://www.leekchan.com&quot;&gt;이경찬&lt;/a&gt;입니다. 애드투페이퍼를 개발 및 운영하면서 경험하고 해결한 사항들을 공유하고자 블로그를 만들었습니다. 첫 번째 포스트에서는 애드투페이퍼 서비스 구성 Stack에 대해서 공유하고자 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_&quot;&gt;서버 구성&lt;/h3&gt;

&lt;p&gt;애드투페이퍼 서비스는 KT Ucloud 인스턴스 7대 위에서 동작하고 있습니다. 각 인스턴스의 역할은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;로드밸런서 1대 (1vCore 1GB | Ubuntu 11.04 | HAProxy)&lt;/li&gt;

&lt;li&gt;어플리케이션 서버 피크 타임 기준 3대 (4vCore 4GB | Ubuntu 11.04 | Gunicorn, Django, Supervisor) - 애드투페이퍼앱은 매일 아침 8시 30분에 수신 거부자를 제외한 전체 회원(약 30만 명)에게 무료 포인트 적립 푸시를 발송합니다.&lt;/li&gt;

&lt;li&gt;DB 2대 (4vCore 4GB | CentOS 5.4 | MySQL Master-Slave Replication 구성)&lt;/li&gt;

&lt;li&gt;캐시 + 워커 서버 1대 (4vCore 8GB | Ubuntu 11.04 | Memcached, Celery, Redis, Supervisor)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;현재는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_point_of_failure&quot;&gt;SPOF&lt;/a&gt; 가 많지만, 점진적으로 개선 중입니다. 궁극적으로는 무중단 인프라를 구축하는 것이 목표입니다. 현재 어플리케이션 서버와 DB는 Failover가 되고, HAProxy 이중화 작업을 최우선 과제로 진행 중입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;__2&quot;&gt;서비스 구성&lt;/h3&gt;

&lt;p&gt;애드투페이퍼 서비스 구성은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;애드투페이퍼 웹서비스  &lt;/li&gt;

&lt;li&gt;애드투페이퍼 앱 API 백엔드  &lt;/li&gt;

&lt;li&gt;프린터 API 백엔드  &lt;/li&gt;

&lt;li&gt;광고주용 실시간 리포트 사이트  &lt;/li&gt;

&lt;li&gt;프린터관리자용 실시간 프린팅 및 정산 정보 확인 사이트  &lt;/li&gt;

&lt;li&gt;내부 관리용 사이트  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;application_server_&quot;&gt;Application Server 구성&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Python&lt;/li&gt;

&lt;li&gt;Django&lt;/li&gt;

&lt;li&gt;Nginx&lt;/li&gt;

&lt;li&gt;Gunicorn&lt;/li&gt;

&lt;li&gt;Supervisor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;앞서 언급한 것처럼 애드투페이퍼 서비스 코드는 Python, Django로 작성됩니다. 리버스 프록시로는 Nginx, WSGI Container로는 Gunicorn을 사용하고 있습니다. Supervisor는 Gunicorn 프로세스 모니터링 용으로 사용 중입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cache_&quot;&gt;Cache 구성&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Memcached&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://pythonhosted.org/johnny-cache/&quot;&gt;Johnny Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;애드투페이퍼 서비스에서는 모든 Database Read Query를 Memcached에 캐시하고 있습니다. 모든 상황에 대해 견고한 Cache Invalidation 로직을 만드는 작업은 매우 많은 시간이 소요되는 작업이므로, Johnny Cache라는 Cache Framework를 사용하고 있습니다. Johnny Cache는 기본적으로 MySQL의 Query Cache와 비슷하게 동작합니다. Johnny Cache Middleware를 등록해 놓으면 Monkey Patch를 통해 SELECT 쿼리가 발생할 때는 쿼리를 Key로 Memcached에 캐시하고, INSERT 또는 UPDATE 쿼리가 발생할 때는 해당 Table에 관계된 Cache들을 자동으로 Invalidation 해줍니다.&lt;/p&gt;

&lt;p&gt;백엔드 코드를 작성할 때는 Memcached의 Cache hit ratio를 높이기 위해 SELECT 문의 WHERE절에는 특정한 상수가 들어가는 것을 피하고 있습니다. 또한 어플리케이션상에서 데이터를 가공할 수 있을 때에는 최대한 어플리케이션에서 코드상에서 처리해서 I/O Bound 되는 것을 피하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;database__storage&quot;&gt;Database / Storage&lt;/h2&gt;

&lt;p&gt;데이터베이스는 MySQL 5.5 를 사용하고 있고, Master-Slave 구성으로 2대를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;서비스상에서 업로드 되는 이미지 및 파일은 Amazon S3 (Tokyo Region)에 저장하고 Tcloud CDN을 붙여서 사용하고 있습니다. 광고 이미지를 리사이징 하는 등의 작업은 어플리케이션 서버에서 인메모리로 처리하고 S3에 저장합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;worker_&quot;&gt;Worker 구성&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Redis&lt;/li&gt;

&lt;li&gt;Celery&lt;/li&gt;

&lt;li&gt;Supervisor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;시간이 걸리는 Task들은 모두 Task Queue를 이용해 비동기로 처리하고 있습니다. Task Queue는 Celery를 이용하고 있고 작업들을 저장하고 분배하는 Broker 용도로 Redis를 사용하고 있습니다. 그리고 Celery 프로세스의 모니터링 용도로 Supervisor를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;어플리케이션 배포는 &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt;을 이용해 자동화하고 있습니다. 배포 시 각 서버에서 실행하는 커맨드는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;__3&quot;&gt;어플리케이션 서버&lt;/h3&gt;
&lt;pre&gt;
[Git 저장소에서 최신 코드 다운로드]
pip install -r ./requirements.txt
supervisorctl status gunicorn | sed &quot;s/.*[pid ]\([0-9]\+\)\,.*/\1/&quot; | xargs kill -HUP
&lt;/pre&gt;
&lt;p&gt;저장소에서 최신 코드를 받아온 뒤, 새로 추가된 모듈들을 설치한 후 Gunicorn에 -HUP signal을 보내서 graceful reload 기능(처리 중인 요청을 모두 처리하고 프로세스를 재시작함)을 실행시킵니다. supervisorctl reload 커맨드로 Gunicorn을 재시작하면 재시작하는 도중에는 요청을 받을 수 없는 상태가 되므로, pid를 읽어와서 -HUP 시그널을 보내는 방식으로 재시작시켜서 무중단으로 코드를 변경하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;___&quot;&gt;캐시 + 워커 서버&lt;/h3&gt;
&lt;pre&gt;
[Git 저장소에서 최신 코드 다운로드]
pip install -r ./requirements.txt
python ./manage.py migrate
supervisorctl reload
&lt;/pre&gt;
&lt;p&gt;캐시 + 워커 서버에서는 &lt;a href=&quot;http://south.aeracode.org/&quot;&gt;South&lt;/a&gt;의 migrate 커맨드를 실행시켜서 데이터베이스를 마이그레이션하는 작업을 담당하고 있습니다. 모든 작업이 끝난 후에는 supervisorctl reload 명령을 실행시켜서 Celery 프로세스를 재시작 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;server_monitoring&quot;&gt;Server Monitoring&lt;/h2&gt;

&lt;p&gt;서버 모니터링은 &lt;a href=&quot;http://www.datadoghq.com/&quot;&gt;datadog&lt;/a&gt; 서비스를 이용해서 하고 있습니다. 실시간 모니터링이 가능하고 대시보드를 만들어 각 서버의 CPU, Memory, Network 사용량 등을 원하는 대로 가공해서 모아서 볼 수 있어서 효과적입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and_more&quot;&gt;And more?&lt;/h2&gt;

&lt;p&gt;지금까지 저희 서비스 구성 Stack에 대해 공유 드렸는데요, 애드투페이퍼 앱에도 흥미로운 공유사항들이 많이 있습니다. 살짝 공유하자면 저희 앱은 HTML, Javascript로 제작되어서 단일 코드 베이스로 iOS / Android 플랫폼 양쪽에 배포하고 있는데요, 후속 포스팅에서 자세히 공유하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;</description>
    </item>
    
    

  </channel> 
</rss>